{"version":3,"sources":["AssetUtils.ts"],"names":["calculateHash","filePath","contents","fs","readFileSync","crypto","createHash","update","digest","optimizeImageAsync","inputPath","quality","logger","global","info","outputPath","temporary","directory","input","output","path","join","basename","hasUnoptimizedAssetsAsync","projectDir","options","existsSync","selectedFiles","getAssetFilesAsync","assetInfo","readAssetJsonAsync","file","hash","exp","assetBundlePatterns","globOptions","cwd","ignore","allFiles","patterns","forEach","pattern","push","glob","sync","included","include","toExclude","Set","exclude","add","excluded","filter","has","filtered","filterImages","files","regex","withDirectory","map","replace","allImages","test","toLowerCase","dirPath","mkdirSync","assetJson","JsonFile","message","chalk","italic","writeAsync","readAsync","createNewFilename","imagePath","dir","name","ext","parse"],"mappings":"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","sourcesContent":["import { readConfigJsonAsync } from '@expo/config';\nimport { sharpAsync } from '@expo/image-utils';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport glob from 'glob';\nimport path from 'path';\nimport temporary from 'tempy';\n\nimport logger from './Logger';\n\n/*\n * Calculate SHA256 Checksum value of a file based on its contents\n */\nexport function calculateHash(filePath: string): string {\n  const contents = fs.readFileSync(filePath);\n  return crypto\n    .createHash('sha256')\n    .update(contents)\n    .digest('hex');\n}\n\n/*\n * Compress an inputted jpg or png\n */\nexport async function optimizeImageAsync(inputPath: string, quality: number): Promise<string> {\n  logger.global.info(`Optimizing ${inputPath}`);\n  const outputPath = temporary.directory();\n  await sharpAsync({\n    input: inputPath,\n    output: outputPath,\n    quality,\n  });\n  return path.join(outputPath, path.basename(inputPath));\n}\n\nexport type OptimizationOptions = {\n  quality?: number;\n  include?: string;\n  exclude?: string;\n  save?: boolean;\n};\n\nexport type AssetOptimizationState = { [hash: string]: boolean };\n\n/*\n * Returns a boolean indicating whether or not there are assets to optimize\n */\nexport async function hasUnoptimizedAssetsAsync(\n  projectDir: string,\n  options: OptimizationOptions\n): Promise<boolean> {\n  if (!fs.existsSync(path.join(projectDir, '.expo-shared/assets.json'))) {\n    return true;\n  }\n  const { selectedFiles } = await getAssetFilesAsync(projectDir, options);\n  const { assetInfo } = await readAssetJsonAsync(projectDir);\n\n  for (const file of selectedFiles) {\n    const hash = calculateHash(file);\n    if (!assetInfo[hash]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/*\n * Find all project assets under assetBundlePatterns in app.json excluding node_modules.\n * If --include of --exclude flags were passed in those results are filtered out.\n */\nexport async function getAssetFilesAsync(\n  projectDir: string,\n  options: OptimizationOptions\n): Promise<{ allFiles: string[]; selectedFiles: string[] }> {\n  const { exp } = await readConfigJsonAsync(projectDir);\n  const { assetBundlePatterns } = exp;\n  const globOptions = {\n    cwd: projectDir,\n    ignore: ['**/node_modules/**', '**/ios/**', '**/android/**'],\n  };\n\n  // All files must be returned even if flags are passed in to properly update assets.json\n  const allFiles: string[] = [];\n  const patterns = assetBundlePatterns || ['**/*'];\n  patterns.forEach((pattern: string) => {\n    allFiles.push(...glob.sync(pattern, globOptions));\n  });\n  // If --include is passed in, only return files matching that pattern\n  const included =\n    options && options.include ? [...glob.sync(options.include, globOptions)] : allFiles;\n  const toExclude = new Set();\n  if (options && options.exclude) {\n    glob.sync(options.exclude, globOptions).forEach(file => toExclude.add(file));\n  }\n  // If --exclude is passed in, filter out files matching that pattern\n  const excluded = included.filter(file => !toExclude.has(file));\n  const filtered = options && options.exclude ? excluded : included;\n  return {\n    allFiles: filterImages(allFiles, projectDir),\n    selectedFiles: filterImages(filtered, projectDir),\n  };\n}\n\n/*\n * Formats an array of files to include the project directory and filters out PNGs and JPGs.\n */\nfunction filterImages(files: string[], projectDir: string) {\n  const regex = /\\.(png|jpg|jpeg)$/;\n  const withDirectory = files.map(file => `${projectDir}/${file}`.replace('//', '/'));\n  const allImages = withDirectory.filter(file => regex.test(file.toLowerCase()));\n  return allImages;\n}\n\n/*\n * Read the contents of assets.json under .expo-shared folder. Create the file/directory if they don't exist.\n */\nexport async function readAssetJsonAsync(\n  projectDir: string\n): Promise<{ assetJson: JsonFile<AssetOptimizationState>; assetInfo: AssetOptimizationState }> {\n  const dirPath = path.join(projectDir, '.expo-shared');\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath);\n  }\n\n  const assetJson = new JsonFile<AssetOptimizationState>(path.join(dirPath, 'assets.json'));\n  if (!fs.existsSync(assetJson.file)) {\n    const message =\n      `Creating ${chalk.italic('.expo-shared/assets.json')} in the project's root directory.\\n` +\n      `This file is autogenerated and should not be edited directly.\\n` +\n      'You should commit this to git so that asset state is shared between collaborators.';\n\n    logger.global.info(message);\n\n    await assetJson.writeAsync({});\n  }\n  const assetInfo = await assetJson.readAsync();\n  return { assetJson, assetInfo };\n}\n\n/*\n * Add .orig extension to a filename in a path string\n */\nexport function createNewFilename(imagePath: string): string {\n  const { dir, name, ext } = path.parse(imagePath);\n  return path.join(dir, name + '.orig' + ext);\n}\n"],"file":"../AssetUtils.js","sourceRoot":"/@expo/xdl@56.8.2/src"}