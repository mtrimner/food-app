{"version":3,"sources":["Project.ts"],"names":["EXPO_CDN","MINIMUM_BUNDLE_SIZE","TUNNEL_TIMEOUT","treekillAsync","treekill","ngrokConnectAsync","ngrok","connect","ngrokKillAsync","kill","_cachedSignedManifest","manifestString","signedManifest","currentStatus","projectDir","packagerPort","expoServerPort","ProjectSettings","readPackagerInfoAsync","getManifestUrlWithFallbackAsync","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","_assertValidProjectRoot","XDLError","_getFreePortAsync","rangeStart","port","hostnames","_getForPlatformAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","axios","get","responseType","transformResponse","data","proxy","validateStatus","status","headers","error","body","JSON","parse","e","ProjectUtils","logError","message","length","_resolveGoogleServicesFile","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","_resolveManifestAssets","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","assetSchema","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","logMethod","logWarning","_requireFromProject","modulePath","exp","fullPath","require","getSlugAsync","options","pkg","slug","name","getLatestReleaseAsync","formData","FormData","append","releaseChannel","queryResult","Api","callMethodAsync","mergeAppDistributions","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","gte","sortedAndroidIndexes","sortedIosIndexes","_writeArtifactSafelyAsync","join","stringify","exportForAppHosting","publicUrl","assetUrl","_validatePackagerReadyAsync","packagerOpts","dev","isDev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","hashIds","HashIds","uuid","v1","revisionId","encode","now","developer","tool","username","UserManager","getCurrentUsernameAsync","ANONYMOUS_USERNAME","id","bundleUrl","dependencies","Object","keys","dumpSourcemap","iosSourceMap","androidSourceMap","_buildSourceMapsAsync","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","_saveAssetAsync","paths","files","fileHashes","keyChunks","key","logDebug","quiet","assetPath","p","findReusableBuildAsync","user","getCurrentUserAsync","buildReuseStatus","ApiV2","clientForUser","postAsync","publishAsync","ensureLoggedInAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","validPostPublishHooks","postPublish","hook","file","fn","_fn","_fetchAndUploadAssetsAsync","_maybeBuildSourceMapsAsync","force","publishSourceMapPath","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","result","config","then","warn","stack","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","validate","toString","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","undefined","sourceMapUrl","constructSourceMapUrlAsync","_collectAssets","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","androidAssetsJson","manifestAssets","absolutePath","iosAssets","androidAssets","concat","_configureExpForAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","add","type","assetCdnPath","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","pathToWrite","dirname","errorMsg","writeFile","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","createReadStream","getConfigAsync","configName","configPrefix","ThirdParty","getManifest","buildAsync","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","version","package","_waitForRunningAsync","retries","test","_logPackagerOutput","level","output","_isIgnorableDuplicateModuleWarning","_isIgnorableMetroConsoleOutput","_isIgnorableRnpmWarning","logInfo","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","_isAppRegistryStartupMessage","_handleDeviceLogs","deviceId","deviceName","logs","i","DEBUG","obj","logWithLevel","tag","groupDepth","shouldHide","includesStack","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","possibleLogReporterPath","assetExts","sourceExts","isTS","isReact","isModern","nonPersistent","Versions","lteSdkVersion","gteSdkVersion","assetPlugins","maxWorkers","userPackagerOpts","cliOpts","val","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","env","process","REACT_NATIVE_APP_ROOT","ELECTRON_RUN_AS_NODE","NODE_PATH","silent","setPackagerInfoAsync","packagerPid","pid","on","stdout","stderr","setEncoding","pipe","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","shouldExposeEnvironmentVariableInManifest","has","toUpperCase","startExpoServerAsync","stopExpoServerAsync","app","use","express","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","encodeURI","encodeURIComponent","hostname","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","serverDriver","serverOS","os","serverOSVersion","release","send","post","close","expRc","manifestPort","listen","address","saveRecentExpRootAsync","_connectToNgrokAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","error_code","resetProjectRandomnessAsync","startTunnelsAsync","stopTunnelsAsync","Android","startAdbReverseAsync","packageShortName","base","startedTunnelsSuccessfully","expoServerNgrokUrl","authtoken","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","_expoEventType","addListener","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","setOptionsAsync","number","integer","getUrlAsync","optimizeAsync","chalk","green","assetJson","assetInfo","outdated","fileHash","totalSaved","allFiles","selectedFiles","hashes","delete","outdatedHash","include","exclude","save","quality","images","image","prevSize","statSync","newName","optimizedImage","newSize","amountSaved","move","gray","newHash","unlinkSync","writeAsync","startAsync","webOnly","Webpack","restartAsync","DevSession","startSession","_stopInternalAsync","stopSession","stopAsync","stopWebOnlyAsync","setTimeout","webpackServerPort"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AADA;AAGA,MAAMA,QAAQ,GAAG,uCAAjB;AACA,MAAMC,mBAAmB,GAAG,GAA5B;AACA,MAAMC,cAAc,GAAG,KAAK,IAA5B;AAEA,MAAMC,aAAa,GAAG,uBAAUC,mBAAV,CAAtB;AACA,MAAMC,iBAAiB,GAAG,uBAAUC,iBAAMC,OAAhB,CAA1B;AACA,MAAMC,cAAc,GAAG,uBAAUF,iBAAMG,IAAhB,CAAvB;AAYA,IAAIC,qBAA2C,GAAG;AAChDC,EAAAA,cAAc,EAAE,IADgC;AAEhDC,EAAAA,cAAc,EAAE;AAFgC,CAAlD;;AAkFO,eAAeC,aAAf,CAA6BC,UAA7B,EAAyE;AAC9E,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAmC,MAAMC,eAAe,GAACC,qBAAhB,CAAsCJ,UAAtC,CAA/C;;AACA,MAAIC,YAAY,IAAIC,cAApB,EAAoC;AAClC,WAAO,SAAP;AACD,GAFD,MAEO,IAAID,YAAY,IAAIC,cAApB,EAAoC;AACzC,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAO,QAAP;AACD;AACF,C,CAED;;;AACO,eAAeG,+BAAf,CACLC,WADK,EAE2C;AAChD,SAAO;AACLC,IAAAA,GAAG,EAAE,MAAMC,QAAQ,GAACC,yBAAT,CAAmCH,WAAnC,CADN;AAELI,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID;;AAED,eAAeC,uBAAf,CAAuCL,WAAvC,EAA4D;AAC1D,MAAI,CAACA,WAAL,EAAkB;AAChB,UAAM,KAAIM,mBAAJ,EAAa,iBAAb,EAAgC,2BAAhC,CAAN;AACD;AACF;;AAED,eAAeC,iBAAf,CAAiCC,UAAjC,EAAqD;AACnD,MAAIC,IAAI,GAAG,MAAM,8BAAcD,UAAd,EAA0B;AAAEE,IAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,WAAP;AAAb,GAA1B,CAAjB;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,UAAM,KAAIH,mBAAJ,EAAa,eAAb,EAA8B,yBAA9B,CAAN;AACD;;AAED,SAAOG,IAAP;AACD;;AAED,eAAeE,oBAAf,CACEX,WADF,EAEEC,GAFF,EAGEW,QAHF,EAIE;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAJF,EAKmB;AACjBb,EAAAA,GAAG,GAAGC,QAAQ,GAACa,4BAAT,CAAsCd,GAAtC,EAA2CW,QAA3C,CAAN;AAEA,MAAII,OAAO,GAAI,GAAEf,GAAI,aAAYW,QAAS,EAA1C;AACA,MAAIK,QAAJ;;AAEA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMC,iBAAMC,GAAN,CAAUH,OAAV,EAAmB;AAClCI,MAAAA,YAAY,EAAE,MADoB;AAElC;AACA;AACAC,MAAAA,iBAAiB,EAAE,CAACC,IAAI,IAAIA,IAAT,CAJe;AAKlCC,MAAAA,KAAK,EAAE,KAL2B;AAMlCC,MAAAA,cAAc,EAAEC,MAAM,IAAIA,MAAM,KAAK,GANH;AAOlCC,MAAAA,OAAO,EAAE;AACP,6BAAqBd;AADd;AAPyB,KAAnB,CAAjB;AAWD,GAZD,CAYE,OAAOe,KAAP,EAAc;AACd,QAAIA,KAAK,CAACV,QAAV,EAAoB;AAClB,UAAIU,KAAK,CAACV,QAAN,CAAeK,IAAnB,EAAyB;AACvB,YAAIM,IAAJ;;AACA,YAAI;AACFA,UAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACV,QAAN,CAAeK,IAA1B,CAAP;AACD,SAFD,CAEE,OAAOS,CAAP,EAAU;AACVC,UAAAA,YAAY,GAACC,QAAb,CAAsBjC,WAAtB,EAAmC,MAAnC,EAA2C2B,KAAK,CAACV,QAAN,CAAeK,IAA1D;AACD;;AAED,YAAIM,IAAJ,EAAU;AACR,cAAIA,IAAI,CAACM,OAAT,EAAkB;AAChBF,YAAAA,YAAY,GAACC,QAAb,CAAsBjC,WAAtB,EAAmC,MAAnC,EAA2C4B,IAAI,CAACM,OAAhD;AACD,WAFD,MAEO;AACLF,YAAAA,YAAY,GAACC,QAAb,CAAsBjC,WAAtB,EAAmC,MAAnC,EAA2C2B,KAAK,CAACV,QAAN,CAAeK,IAA1D;AACD;AACF;AACF;;AACD,YAAM,KAAIhB,mBAAJ,EACJO,SADI,EAEH,gBAAeG,OAAQ,6BAA4BW,KAAK,CAACV,QAAN,CAAeQ,MAAO,IAA1E,GACE,4EADF,GAEE,0FAJE,CAAN;AAMD,KAvBD,MAuBO;AACL,YAAME,KAAN;AACD;AACF;;AAED,MAAI,CAACV,QAAQ,CAACK,IAAV,IAAmBR,SAAS,IAAIG,QAAQ,CAACK,IAAT,CAAca,MAAd,GAAuBrB,SAA3D,EAAuE;AACrE,UAAM,KAAIR,mBAAJ,EAAaO,SAAb,EAAyB,YAAWI,QAAQ,CAACK,IAAK,EAAlD,CAAN;AACD;;AAED,SAAOL,QAAQ,CAACK,IAAhB;AACD;;AAED,eAAec,0BAAf,CAA0CpC,WAA1C,EAA+DqC,QAA/D,EAAqF;AACnF,MAAIA,QAAQ,CAACC,OAAT,IAAoBD,QAAQ,CAACC,OAAT,CAAiBC,kBAAzC,EAA6D;AAC3D,UAAMC,QAAQ,GAAG,MAAMC,mBAAGC,QAAH,CACrBC,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BqC,QAAQ,CAACC,OAAT,CAAiBC,kBAA3C,CADqB,EAErB,MAFqB,CAAvB;AAIAF,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,kBAAjB,GAAsCC,QAAtC;AACD;;AACD,MAAIH,QAAQ,CAACQ,GAAT,IAAgBR,QAAQ,CAACQ,GAAT,CAAaN,kBAAjC,EAAqD;AACnD,UAAMC,QAAQ,GAAG,MAAMC,mBAAGC,QAAH,CACrBC,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BqC,QAAQ,CAACQ,GAAT,CAAaN,kBAAvC,CADqB,EAErB,QAFqB,CAAvB;AAIAF,IAAAA,QAAQ,CAACQ,GAAT,CAAaN,kBAAb,GAAkCC,QAAlC;AACD;AACF;;AAED,eAAeM,sBAAf,CACE9C,WADF,EAEEqC,QAFF,EAGEU,QAHF,EAIEC,MAAM,GAAG,KAJX,EAKE;AACA,MAAI;AACF;AACA,UAAMC,YAAY,GAAG,CAAC,MAAMC,SAAS,GAACC,oBAAV,CAC1Bd,QAAQ,CAACe,UADiB,CAAP,EAElBC,MAFkB,CAEVC,WAAD,IAAwC,oBAAIjB,QAAJ,EAAciB,WAAW,CAACC,SAA1B,CAF7B,CAArB,CAFE,CAMF;;AACA,UAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBT,YAAY,CAACU,GAAb,CAAiB,MAAOL,WAAP,IAA8C;AAC7D,YAAMM,SAAS,GAAG,oBAAIvB,QAAJ,EAAciB,WAAW,CAACC,SAA1B,CAAlB;;AACA,UAAIK,SAAS,CAACC,KAAV,CAAgB,mBAAhB,CAAJ,EAA0C;AACxC;AACA,eAAOD,SAAP;AACD,OAHD,MAGO,IAAInB,mBAAGqB,UAAH,CAAcnB,gBAAKC,OAAL,CAAa5C,WAAb,EAA0B4D,SAA1B,CAAd,CAAJ,EAAyD;AAC9D,eAAO,MAAMb,QAAQ,CAACa,SAAD,CAArB;AACD,OAFM,MAEA;AACL,cAAMG,GAA4B,GAAG,IAAIC,KAAJ,CAAU,gCAAV,CAArC;AACAD,QAAAA,GAAG,CAACE,cAAJ,GAAqBL,SAArB;AACAG,QAAAA,GAAG,CAACG,aAAJ,GAAoBZ,WAAW,CAACC,SAAhC;AACA,cAAMQ,GAAN;AACD;AACF,KAbD,CADiB,CAAnB,CAPE,CAwBF;;AACAd,IAAAA,YAAY,CAACkB,OAAb,CAAqB,CAACb,WAAD,EAAqCc,KAArC,KACnB,oBAAI/B,QAAJ,EAAciB,WAAW,CAACC,SAAZ,GAAwB,KAAtC,EAA6CC,IAAI,CAACY,KAAD,CAAjD,CADF;AAGD,GA5BD,CA4BE,OAAOrC,CAAP,EAAU;AACV,QAAIsC,SAAS,GAAGrC,YAAY,GAACsC,UAA7B;;AACA,QAAItB,MAAJ,EAAY;AACVqB,MAAAA,SAAS,GAAGrC,YAAY,GAACC,QAAzB;AACD;;AACD,QAAIF,CAAC,CAACkC,cAAN,EAAsB;AACpBI,MAAAA,SAAS,CACPrE,WADO,EAEP,MAFO,EAGN,4BAA2B+B,CAAC,CAACkC,cAAe,WAAUlC,CAAC,CAACmC,aAAc,yBAHhE,CAAT;AAKD,KAND,MAMO;AACLG,MAAAA,SAAS,CACPrE,WADO,EAEP,MAFO,EAGN,qEAAoE+B,CAAC,CAACG,OAAQ,GAHxE,CAAT;AAKD;;AAED,QAAIc,MAAJ,EAAY;AACV,YAAM,IAAIgB,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF;AACF;;AAED,SAASO,mBAAT,CAA6BC,UAA7B,EAAiDxE,WAAjD,EAAsEyE,GAAtE,EAAuF;AACrF,MAAI;AACF,QAAIC,QAAQ,GAAG,6BAAcF,UAAd,EAA0BxE,WAA1B,EAAuCyE,GAAvC,CAAf,CADE,CAEF;AACA;;AACA,4BAAQC,QAAR,EAJE,CAKF;;AACA,WAAOC,OAAO,CAACD,QAAD,CAAd;AACD,GAPD,CAOE,OAAO3C,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;;AAEM,eAAe6C,YAAf,CAA4B5E,WAA5B,EAAiD6E,OAAO,GAAG,EAA3D,EAAgF;AACrF,QAAM;AAAEJ,IAAAA,GAAF;AAAOK,IAAAA;AAAP,MAAe,MAAM,mCAAoB9E,WAApB,CAA3B;;AACA,MAAIyE,GAAG,CAACM,IAAR,EAAc;AACZ,WAAON,GAAG,CAACM,IAAX;AACD;;AACD,MAAID,GAAG,CAACE,IAAR,EAAc;AACZ,WAAOF,GAAG,CAACE,IAAX;AACD;;AACD,QAAM,KAAI1E,mBAAJ,EACJ,kBADI,EAEH,eAAcN,WAAY,gCAFvB,CAAN;AAID;;AAEM,eAAeiF,qBAAf,CACLjF,WADK,EAEL6E,OAFK,EAMoB;AACzB;AACA,MAAIK,QAAQ,GAAG,KAAIC,mBAAJ,GAAf;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6B,SAA7B;AACAF,EAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,GAAwB,MAAMR,YAAY,CAAC5E,WAAD,CAA1C;AACAkF,EAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2B,GAA3B;AACAF,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyB,GAAzB;AACAF,EAAAA,QAAQ,CAACE,MAAT,CAAgB,gBAAhB,EAAkCP,OAAO,CAACQ,cAA1C;AACAH,EAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BP,OAAO,CAACjE,QAApC;AACA,QAAM;AAAE0E,IAAAA;AAAF,MAAkB,MAAMC,eAAIC,eAAJ,CAAoB,aAApB,EAAmC,EAAnC,EAAuC,MAAvC,EAA+C,IAA/C,EAAqD;AACjFN,IAAAA;AADiF,GAArD,CAA9B;;AAGA,MAAII,WAAW,IAAIA,WAAW,CAACnD,MAAZ,GAAqB,CAAxC,EAA2C;AACzC,WAAOmD,WAAW,CAAC,CAAD,CAAlB;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF,C,CAED;;;AACO,eAAeG,qBAAf,CACLzF,WADK,EAEL0F,UAFK,EAGLC,SAHK,EAIU;AACf,QAAMC,gBAAgB,GAAGjD,gBAAKC,OAAL,CAAa5C,WAAb,EAA0B2F,SAA1B,EAAqC,QAArC,CAAzB;;AACA,QAAMlD,mBAAGoD,SAAH,CAAaD,gBAAb,CAAN;;AACA,QAAME,kBAAkB,GAAGnD,gBAAKC,OAAL,CAAa5C,WAAb,EAA0B2F,SAA1B,EAAqC,SAArC,CAA3B;;AACA,QAAMlD,mBAAGoD,SAAH,CAAaC,kBAAb,CAAN,CAJe,CAMf;;AACA,QAAMC,cAAiC,GAAG,EAA1C;AACA,QAAMC,UAA6B,GAAG,EAAtC;;AAEA,OAAK,IAAIC,SAAT,IAAsBP,UAAtB,EAAkC;AAChC,UAAMQ,QAAQ,GAAG,EAAjB,CADgC,CAGhC;;AACA,QAAID,SAAS,KAAKN,SAAlB,EAA6B;AAC3B;AACA,YAAMQ,cAAc,GAAGxD,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BiG,SAA1B,EAAqC,QAArC,CAAvB;;AACA,YAAMG,cAAc,GAAGzD,gBAAKC,OAAL,CAAa5C,WAAb,EAA0B2F,SAA1B,EAAqC,QAArC,CAAvB;;AACA,YAAMU,YAAY,GAAG5D,mBAAG6D,IAAH,CAAQH,cAAR,EAAwBC,cAAxB,CAArB;;AACAF,MAAAA,QAAQ,CAACK,IAAT,CAAcF,YAAd,EAL2B,CAO3B;;AACA,YAAMG,eAAe,GAAG7D,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BiG,SAA1B,EAAqC,SAArC,CAAxB;;AACA,YAAMQ,eAAe,GAAG9D,gBAAKC,OAAL,CAAa5C,WAAb,EAA0B2F,SAA1B,EAAqC,SAArC,CAAxB;;AACA,YAAMe,aAAa,GAAGjE,mBAAG6D,IAAH,CAAQE,eAAR,EAAyBC,eAAzB,CAAtB;;AACAP,MAAAA,QAAQ,CAACK,IAAT,CAAcG,aAAd;AAEA,YAAMjD,OAAO,CAACC,GAAR,CAAYwC,QAAZ,CAAN;AACD,KAlB+B,CAoBhC;;;AACA,UAAMS,eAAe,GAAG,OAAOC,SAAP,EAA0BC,WAA1B,KAA6D;AACnF,YAAMzC,KAAK,GAAI,MAAM0C,oBAASC,SAAT,CAAmBH,SAAnB,CAArB;;AACA,UAAI,CAACxC,KAAK,CAAChB,UAAX,EAAuB;AACrB,cAAM,KAAI9C,mBAAJ,EACJ,kBADI,EAEH,qDAAoDsG,SAAU,EAF3D,CAAN;AAID;;AACD,UAAII,KAAK,CAACC,OAAN,CAAc7C,KAAd,CAAJ,EAA0B;AACxB;AACAyC,QAAAA,WAAW,CAACN,IAAZ,CAAiB,GAAGnC,KAApB;AACD,OAHD,MAGO;AACLyC,QAAAA,WAAW,CAACN,IAAZ,CAAiBnC,KAAjB;AACD;AACF,KAdD;;AAgBA,UAAM8C,gBAAgB,GAAGvE,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BiG,SAA1B,EAAqC,oBAArC,CAAzB;;AACA,UAAMU,eAAe,CAACO,gBAAD,EAAmBnB,cAAnB,CAArB;;AAEA,UAAMoB,YAAY,GAAGxE,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BiG,SAA1B,EAAqC,gBAArC,CAArB;;AACA,UAAMU,eAAe,CAACQ,YAAD,EAAenB,UAAf,CAArB;AACD,GApDc,CAsDf;;;AACA,QAAMoB,cAAc,GAAIC,OAAD,IAAgC;AACrD,WAAOA,OAAO,CAACC,IAAR,CAAa,CAACC,MAAD,EAA0BC,MAA1B,KAAsD;AACxE,UAAIC,kBAAOC,EAAP,CAAUH,MAAM,CAACnE,UAAjB,EAA6BoE,MAAM,CAACpE,UAApC,CAAJ,EAAqD;AACnDuE,0BAAOC,MAAP,CAAcjG,KAAd,CACG,6DAA4D4F,MAAM,CAACnE,UAAW,4CADjF;AAGD;;AACD,aAAOqE,kBAAOI,GAAP,CAAWN,MAAM,CAACnE,UAAlB,EAA8BoE,MAAM,CAACpE,UAArC,IAAmD,CAAC,CAApD,GAAwD,CAA/D;AACD,KAPM,CAAP;AAQD,GATD;;AAWA,QAAM0E,oBAAoB,GAAGV,cAAc,CAACrB,cAAD,CAA3C;AACA,QAAMgC,gBAAgB,GAAGX,cAAc,CAACpB,UAAD,CAAvC,CAnEe,CAqEf;;AACA,QAAMgC,yBAAyB,CAC7BhI,WAD6B,EAE7B,IAF6B,EAG7B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,oBAArB,CAH6B,EAI7B9D,IAAI,CAACqG,SAAL,CAAeJ,oBAAf,CAJ6B,CAA/B;AAOA,QAAME,yBAAyB,CAC7BhI,WAD6B,EAE7B,IAF6B,EAG7B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,gBAArB,CAH6B,EAI7B9D,IAAI,CAACqG,SAAL,CAAeH,gBAAf,CAJ6B,CAA/B;AAMD;AAED;;;;;;;;;;;;;AAWO,eAAeI,mBAAf,CACLnI,WADK,EAELoI,SAFK,EAGLC,QAHK,EAIL1C,SAJK,EAKLd,OAKC,GAAG,EAVC,EAWU;AACf,QAAMyD,2BAA2B,CAACtI,WAAD,CAAjC,CADe,CAGf;;AACA,MAAIuI,YAAY,GAAG;AACjBC,IAAAA,GAAG,EAAE,CAAC,CAAC3D,OAAO,CAAC4D,KADE;AAEjBC,IAAAA,MAAM,EAAE;AAFS,GAAnB,CAJe,CAQf;;AACA,QAAM9C,gBAAgB,GAAGjD,gBAAKC,OAAL,CAAa5C,WAAb,EAA0B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,QAArB,CAA1B,CAAzB;;AACA,QAAMlD,mBAAGoD,SAAH,CAAaD,gBAAb,CAAN;;AACA,QAAME,kBAAkB,GAAGnD,gBAAKC,OAAL,CAAa5C,WAAb,EAA0B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,SAArB,CAA1B,CAA3B;;AACA,QAAMlD,mBAAGoD,SAAH,CAAaC,kBAAb,CAAN;AAEA,QAAM;AAAE6C,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA+B,MAAMC,yBAAyB,CAAC7I,WAAD,EAAcuI,YAAd,CAApE;;AACA,QAAMO,aAAa,GAAGC,kBACnBC,UADmB,CACR,KADQ,EAEnBC,MAFmB,CAEZN,SAFY,EAGnBO,MAHmB,CAGZ,KAHY,CAAtB;;AAIA,QAAMC,YAAY,GAAI,OAAML,aAAc,KAA1C;;AACA,QAAMM,SAAS,GAAGzG,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,SAArB,EAAgCwD,YAAhC,CAAlB;;AAEA,QAAME,iBAAiB,GAAGN,kBACvBC,UADuB,CACZ,KADY,EAEvBC,MAFuB,CAEhBL,aAFgB,EAGvBM,MAHuB,CAGhB,KAHgB,CAA1B;;AAIA,QAAMI,gBAAgB,GAAI,WAAUD,iBAAkB,KAAtD;;AACA,QAAME,aAAa,GAAG5G,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,SAArB,EAAgC2D,gBAAhC,CAAtB;;AAEA,QAAMtB,yBAAyB,CAAChI,WAAD,EAAc,IAAd,EAAoBoJ,SAApB,EAA+BT,SAA/B,CAA/B;AACA,QAAMX,yBAAyB,CAAChI,WAAD,EAAc,IAAd,EAAoBuJ,aAApB,EAAmCX,aAAnC,CAA/B;;AACAjB,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,6BAAnB,EA/Be,CAiCf;AACA;;;AACA,QAAMC,cAAc,GAAG5E,OAAO,CAAC4E,cAAR,IAA0B,EAAjD;AACA,QAAM;AAAEhF,IAAAA,GAAF;AAAOK,IAAAA;AAAP,MAAe,MAAM4E,yBAAyB,CAAC1J,WAAD,EAAcyJ,cAAd,CAApD;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAa,MAAMC,wBAAwB,CAAC5J,WAAD,EAAcyE,GAAd,EAAmB2D,SAAnB,EAA8BzC,SAA9B,CAAjD;;AAEA,MAAId,OAAO,CAACgF,YAAZ,EAA0B;AACxBlC,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB,oBAAnB;;AACA,UAAMM,QAAmC,GAAG,EAA5C;AACAH,IAAAA,MAAM,CAACxF,OAAP,CAAgB4F,KAAD,IAAkB;AAC/BD,MAAAA,QAAQ,CAACC,KAAK,CAACC,IAAP,CAAR,GAAuBD,KAAvB;AACD,KAFD;AAGA,UAAM/B,yBAAyB,CAC7BhI,WAD6B,EAE7B,IAF6B,EAG7B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,eAArB,CAH6B,EAI7B9D,IAAI,CAACqG,SAAL,CAAe4B,QAAf,CAJ6B,CAA/B;AAMD,GAnDc,CAqDf;;;AACA,SAAOrF,GAAG,CAACwF,KAAX,CAtDe,CAwDf;;AACAxF,EAAAA,GAAG,CAACyF,gBAAJ,GAAuB7B,QAAvB;AAEA5D,EAAAA,GAAG,CAAC0F,aAAJ,GAAoB,IAAIC,IAAJ,GAAWC,WAAX,EAApB;AACA5F,EAAAA,GAAG,CAAC6F,UAAJ,GAAiB,IAAIF,IAAJ,GAAWC,WAAX,EAAjB,CA5De,CA8Df;;AACA,QAAME,OAAO,GAAG,KAAIC,kBAAJ,EAAYC,gBAAKC,EAAL,EAAZ,EAAuB,EAAvB,CAAhB;AACAjG,EAAAA,GAAG,CAACkG,UAAJ,GAAiBJ,OAAO,CAACK,MAAR,CAAeR,IAAI,CAACS,GAAL,EAAf,CAAjB;;AAEA,MAAIhG,OAAO,CAAC4D,KAAZ,EAAmB;AACjBhE,IAAAA,GAAG,CAACqG,SAAJ,GAAgB;AACdC,MAAAA,IAAI,EAAE;AADQ,KAAhB;AAGD;;AAED,MAAI,CAACtG,GAAG,CAACM,IAAT,EAAe;AACb,UAAM,KAAIzE,mBAAJ,EAAa,kBAAb,EAAiC,qDAAjC,CAAN;AACD;;AACD,MAAI0K,QAAQ,GAAG,MAAMC,gBAAYC,uBAAZ,EAArB;;AACA,MAAI,CAACF,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAGG,0BAAX;AACD;;AACD1G,EAAAA,GAAG,CAAC2G,EAAJ,GAAU,IAAGJ,QAAS,IAAGvG,GAAG,CAACM,IAAK,EAAlC,CA/Ee,CAiFf;;AACAN,EAAAA,GAAG,CAAC4G,SAAJ,GAAgB,wBAAQjD,SAAR,EAAmB,SAAnB,EAA8BkB,gBAA9B,CAAhB;AACA7E,EAAAA,GAAG,CAAC7D,QAAJ,GAAe,SAAf;AACA,QAAMoH,yBAAyB,CAC7BhI,WAD6B,EAE7B,IAF6B,EAG7B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,oBAArB,CAH6B,EAI7B9D,IAAI,CAACqG,SAAL,CAAe,EAAE,GAAGzD,GAAL;AAAU6G,IAAAA,YAAY,EAAEC,MAAM,CAACC,IAAP,CAAY1G,GAAG,CAACwG,YAAhB;AAAxB,GAAf,CAJ6B,CAA/B,CApFe,CA2Ff;;AACA7G,EAAAA,GAAG,CAAC4G,SAAJ,GAAgB,wBAAQjD,SAAR,EAAmB,SAAnB,EAA8Be,YAA9B,CAAhB;AACA1E,EAAAA,GAAG,CAAC7D,QAAJ,GAAe,KAAf;AACA,QAAMoH,yBAAyB,CAC7BhI,WAD6B,EAE7B,IAF6B,EAG7B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,gBAArB,CAH6B,EAI7B9D,IAAI,CAACqG,SAAL,CAAezD,GAAf,CAJ6B,CAA/B,CA9Fe,CAqGf;;AACA,MAAII,OAAO,CAAC4G,aAAZ,EAA2B;AACzB,UAAM;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAqC,MAAMC,qBAAqB,CAAC5L,WAAD,EAAcyE,GAAd,CAAtE,CADyB,CAEzB;;AACA,UAAMoH,UAAU,GAAI,OAAM/C,aAAc,MAAxC;;AACA,UAAMgD,UAAU,GAAGnJ,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,SAArB,EAAgCkG,UAAhC,CAAnB;;AACA,UAAM7D,yBAAyB,CAAChI,WAAD,EAAc,IAAd,EAAoB8L,UAApB,EAAgCJ,YAAhC,CAA/B;AAEA,UAAMK,cAAc,GAAI,WAAU1C,iBAAkB,MAApD;;AACA,UAAM2C,cAAc,GAAGrJ,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,SAArB,EAAgCoG,cAAhC,CAAvB;;AACA,UAAM/D,yBAAyB,CAAChI,WAAD,EAAc,IAAd,EAAoBgM,cAApB,EAAoCL,gBAApC,CAA/B,CATyB,CAWzB;;AACAhE,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB,wBAAnB;;AACA,UAAMyC,kBAAkB,CAAC7C,SAAD,EAAY,CAAZ,CAAxB;AACA,UAAM6C,kBAAkB,CAAC1C,aAAD,EAAgB,CAAhB,CAAxB,CAdyB,CAgBzB;;AACA,UAAM9G,mBAAGyJ,UAAH,CAAc9C,SAAd,EAA0B,0BAAyByC,UAAW,EAA9D,CAAN;AACA,UAAMpJ,mBAAGyJ,UAAH,CAAc3C,aAAd,EAA8B,0BAAyBwC,cAAe,EAAtE,CAAN,CAlByB,CAoBzB;;AACApE,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB,sCAAnB;;AACA,UAAM2C,SAAS,GAAI;mBACJ,wBAAQ,SAAR,EAAmBhD,YAAnB,CAAiC;mBACjC,wBAAQ,SAAR,EAAmBG,gBAAnB,CAAqC;;;KAFpD;AAMA,UAAMtB,yBAAyB,CAC7BhI,WAD6B,EAE7B,IAF6B,EAG7B2C,gBAAKsF,IAAL,CAAUtC,SAAV,EAAqB,YAArB,CAH6B,EAI7BwG,SAJ6B,CAA/B;AAMD;AACF,C,CAED;;;AACA,eAAeF,kBAAf,CAAkCG,QAAlC,EAAoDC,CAApD,EAA+D;AAC7D,QAAMC,KAAK,GAAG,MAAMC,yBAAcC,IAAd,CAAmBJ,QAAnB,EAA6BC,CAA7B,CAApB;AACA,QAAMI,WAAW,GAAGH,KAAK,CAACnK,MAA1B;AACA,QAAM;AAAEuK,IAAAA;AAAF,MAAW,MAAMjK,mBAAGkK,IAAH,CAAQP,QAAR,CAAvB;AACA,QAAM3J,mBAAGmK,QAAH,CAAYR,QAAZ,EAAsBM,IAAI,GAAGD,WAA7B,CAAN;AACD;;AAED,eAAeI,eAAf,CAA+B7M,WAA/B,EAAoD2J,MAApD,EAAqEhE,SAArE,EAAwF;AACtF;AACA,QAAMmH,KAAqC,GAAG,EAA9C;AACAnD,EAAAA,MAAM,CAACxF,OAAP,CAAe4F,KAAK,IAAI;AACtBA,IAAAA,KAAK,CAACgD,KAAN,CAAY5I,OAAZ,CAAoB,CAACxB,IAAD,EAAeyB,KAAf,KAAiC;AACnD0I,MAAAA,KAAK,CAAC/C,KAAK,CAACiD,UAAN,CAAiB5I,KAAjB,CAAD,CAAL,GAAiCzB,IAAjC;AACD,KAFD;AAGD,GAJD,EAHsF,CAStF;;AACA,QAAMsK,SAAS,GAAG,sBAAM1B,MAAM,CAACC,IAAP,CAAYsB,KAAZ,CAAN,EAA0B,CAA1B,CAAlB;;AACA,OAAK,MAAMtB,IAAX,IAAmByB,SAAnB,EAA8B;AAC5B,UAAM/G,QAAQ,GAAG,EAAjB;;AACA,SAAK,MAAMgH,GAAX,IAAkB1B,IAAlB,EAAwB;AACtBxJ,MAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,aAAY8M,KAAK,CAACI,GAAD,CAAM,EAAnE;;AAEAvF,wBAAOC,MAAP,CAAc4B,IAAd,CAAmB;AAAE4D,QAAAA,KAAK,EAAE;AAAT,OAAnB,EAAqC,UAASN,KAAK,CAACI,GAAD,CAAM,EAAzD;;AAEA,UAAIG,SAAS,GAAG1K,gBAAKC,OAAL,CAAa+C,SAAb,EAAwB,QAAxB,EAAkCuH,GAAlC,CAAhB,CALsB,CAOtB;;;AACA,YAAMI,CAAC,GAAG7K,mBAAG6D,IAAH,CAAQwG,KAAK,CAACI,GAAD,CAAb,EAAoBG,SAApB,CAAV;;AACAnH,MAAAA,QAAQ,CAACK,IAAT,CAAc+G,CAAd;AACD;;AACD,UAAM7J,OAAO,CAACC,GAAR,CAAYwC,QAAZ,CAAN;AACD;;AACDyB,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,2BAAnB;AACD;;AAEM,eAAe+D,sBAAf,CACLlI,cADK,EAELzE,QAFK,EAGLwC,UAHK,EAIL2B,IAJK,EAKiD;AACtD,QAAMyI,IAAI,GAAG,MAAMvC,gBAAYwC,mBAAZ,EAAnB;AAEA,QAAMC,gBAAgB,GAAG,MAAMC,gBAAMC,aAAN,CAAoBJ,IAApB,EAA0BK,SAA1B,CAAoC,wBAApC,EAA8D;AAC3FxI,IAAAA,cAD2F;AAE3FzE,IAAAA,QAF2F;AAG3FwC,IAAAA,UAH2F;AAI3F2B,IAAAA;AAJ2F,GAA9D,CAA/B;AAOA,SAAO2I,gBAAP;AACD;;AAEM,eAAeI,YAAf,CACL9N,WADK,EAEL6E,OAAuB,GAAG,EAFrB,EAGkD;AACvD,QAAM2I,IAAI,GAAG,MAAMvC,gBAAY8C,mBAAZ,EAAnB;AACA,QAAMzF,2BAA2B,CAACtI,WAAD,CAAjC;AACAgO,EAAAA,SAAS,GAACC,QAAV,CAAmB,SAAnB,EAA8B;AAC5BjO,IAAAA,WAD4B;AAE5BkO,IAAAA,aAAa,EAAEC,kBAAOD;AAFM,GAA9B;AAKA,QAAME,gBAAgB,GAAG,MAAMC,MAAM,GAACC,wBAAP,CAAgCtO,WAAhC,CAA/B;;AACA,MAAIoO,gBAAgB,KAAKC,MAAM,GAACE,KAA5B,IAAqCH,gBAAgB,KAAKC,MAAM,GAACG,KAArE,EAA4E;AAC1E,UAAM,KAAIlO,mBAAJ,EACJ,0BADI,EAEJ,oGAFI,CAAN;AAID,GAdsD,CAgBvD;;;AACA,MAAI;AAAEmE,IAAAA,GAAF;AAAOK,IAAAA;AAAP,MAAe,MAAM4E,yBAAyB,CAAC1J,WAAD,EAAc6E,OAAd,CAAlD,CAjBuD,CAmBvD;;AACA,MAAI;AAAEoF,IAAAA;AAAF,MAAYxF,GAAhB;AACA,SAAOA,GAAG,CAACwF,KAAX;AACA,MAAIwE,qBAAwC,GAAG,EAA/C;;AACA,MAAIxE,KAAK,IAAIA,KAAK,CAACyE,WAAnB,EAAgC;AAC9BzE,IAAAA,KAAK,CAACyE,WAAN,CAAkBvK,OAAlB,CAA2BwK,IAAD,IAAe;AACvC,UAAI;AAAEC,QAAAA;AAAF,UAAWD,IAAf;;AACA,UAAIE,EAAE,GAAGtK,mBAAmB,CAACqK,IAAD,EAAO5O,WAAP,EAAoByE,GAApB,CAA5B;;AACA,UAAI,OAAOoK,EAAP,KAAc,UAAlB,EAA8B;AAC5BlH,0BAAOC,MAAP,CAAcjG,KAAd,CACG,oCAAmCiN,IAAK,2CAD3C;AAGD,OAJD,MAIO;AACLD,QAAAA,IAAI,CAACG,GAAL,GAAWD,EAAX;AACAJ,QAAAA,qBAAqB,CAAClI,IAAtB,CAA2BoI,IAA3B;AACD;AACF,KAXD;;AAaA,QAAIF,qBAAqB,CAACtM,MAAtB,KAAiC8H,KAAK,CAACyE,WAAN,CAAkBvM,MAAvD,EAA+D;AAC7DwF,wBAAOC,MAAP,CAAcjG,KAAd;;AAEA,YAAM,KAAIrB,mBAAJ,EACJ,2BADI,EAEJ,iDAFI,CAAN;AAID;AACF;;AAED,MAAI;AAAEqI,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA+B,MAAMC,yBAAyB,CAAC7I,WAAD,CAAlE;AAEA,QAAM+O,0BAA0B,CAAC/O,WAAD,EAAcyE,GAAd,CAAhC;AAEA,MAAI;AAAEiH,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAqC,MAAMqD,0BAA0B,CAAChP,WAAD,EAAcyE,GAAd,EAAmB;AAC1FwK,IAAAA,KAAK,EACHR,qBAAqB,CAACtM,MAAtB,GAA+B,CAA/B,IACCsC,GAAG,CAACnC,OAAJ,IAAemC,GAAG,CAACnC,OAAJ,CAAY4M,oBAD5B,IAECzK,GAAG,CAAC5B,GAAJ,IAAW4B,GAAG,CAAC5B,GAAJ,CAAQqM;AAJoE,GAAnB,CAAzE;AAOA,MAAIjO,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMkO,qBAAqB,CAAC;AACrCrK,MAAAA,GADqC;AAErCL,MAAAA,GAFqC;AAGrCkE,MAAAA,SAHqC;AAIrCC,MAAAA,aAJqC;AAKrC/D,MAAAA;AALqC,KAAD,CAAtC;AAOD,GARD,CAQE,OAAO9C,CAAP,EAAU;AACV,QAAIA,CAAC,CAACqN,WAAF,KAAkB,yBAAtB,EAAiD;AAC/C,YAAM,IAAIpL,KAAJ,CACH,oHADG,CAAN;AAGD;;AACDqL,IAAAA,MAAM,GAACC,gBAAP,CAAwBvN,CAAxB;AACA,UAAMA,CAAN;AACD;;AAED,QAAMwN,+BAA+B,CAAC;AACpC9K,IAAAA,GADoC;AAEpCzE,IAAAA,WAFoC;AAGpC2I,IAAAA,SAHoC;AAIpCC,IAAAA,aAJoC;AAKpC8C,IAAAA,YALoC;AAMpCC,IAAAA;AANoC,GAAD,CAArC;;AASA,MACE8C,qBAAqB,CAACtM,MAAtB,IACCsC,GAAG,CAAC5B,GAAJ,IAAW4B,GAAG,CAAC5B,GAAJ,CAAQ2M,mBADpB,IAEC/K,GAAG,CAACnC,OAAJ,IAAemC,GAAG,CAACnC,OAAJ,CAAYkN,mBAH9B,EAIE;AACA,QAAI,CAACC,eAAD,EAAkBC,WAAlB,IAAiC,MAAMjM,OAAO,CAACC,GAAR,CAAY,CACrDiM,aAAa,GAACC,gBAAd,CAA+B3O,QAAQ,CAAChB,GAAxC,EAA6C;AAC3C,8BAAwBwE,GAAG,CAACrB,UADe;AAE3C,2BAAqB,SAFsB;AAG3C,8BAAwByB,OAAO,CAACQ,cAHW;AAI3CwK,MAAAA,MAAM,EAAE;AAJmC,KAA7C,CADqD,EAOrDF,aAAa,GAACC,gBAAd,CAA+B3O,QAAQ,CAAChB,GAAxC,EAA6C;AAC3C,8BAAwBwE,GAAG,CAACrB,UADe;AAE3C,2BAAqB,KAFsB;AAG3C,8BAAwByB,OAAO,CAACQ,cAHW;AAI3CwK,MAAAA,MAAM,EAAE;AAJmC,KAA7C,CAPqD,CAAZ,CAA3C;AAeA,UAAMC,WAAW,GAAG;AAClB7P,MAAAA,GAAG,EAAEgB,QAAQ,CAAChB,GADI;AAElBwE,MAAAA,GAFkB;AAGlBkE,MAAAA,SAHkB;AAIlB+C,MAAAA,YAJkB;AAKlBgE,MAAAA,WALkB;AAMlB9G,MAAAA,aANkB;AAOlB+C,MAAAA,gBAPkB;AAQlB8D,MAAAA,eARkB;AASlBzP,MAAAA,WATkB;AAUlB+P,MAAAA,GAAG,EAAGC,GAAD,IAAc;AACjBrI,0BAAOC,MAAP,CAAc4B,IAAd,CAAmB;AAAE4D,UAAAA,KAAK,EAAE;AAAT,SAAnB,EAAoC4C,GAApC;AACD;AAZiB,KAApB;;AAeA,SAAK,IAAIrB,IAAT,IAAiBF,qBAAjB,EAAwC;AACtC9G,wBAAOC,MAAP,CAAc4B,IAAd,CAAoB,6BAA4BmF,IAAI,CAACC,IAAK,EAA1D;;AACA,UAAI;AACF,YAAIqB,MAAM,GAAGtB,IAAI,CAACG,GAAL,CAAS;AACpBoB,UAAAA,MAAM,EAAEvB,IAAI,CAACuB,MADO;AAEpB,aAAGJ;AAFiB,SAAT,CAAb,CADE,CAMF;;;AACA,YAAIG,MAAM,IAAIA,MAAM,CAACE,IAArB,EAA2B;AACzBF,UAAAA,MAAM,GAAG,MAAMA,MAAf;AACD;;AAED,YAAIA,MAAJ,EAAY;AACVtI,4BAAOC,MAAP,CAAc4B,IAAd,CAAmB;AAAE4D,YAAAA,KAAK,EAAE;AAAT,WAAnB,EAAoC6C,MAApC;AACD;AACF,OAdD,CAcE,OAAOlO,CAAP,EAAU;AACV4F,0BAAOC,MAAP,CAAcwI,IAAd,CAAoB,8BAA6BzB,IAAI,CAACC,IAAK,aAAY7M,CAAC,CAACsO,KAAM,EAA/E;AACD;AACF;;AAED,QAAI5L,GAAG,CAAC5B,GAAJ,IAAW4B,GAAG,CAAC5B,GAAJ,CAAQ2M,mBAAvB,EAA4C;AAC1C,YAAMxH,yBAAyB,CAC7BhI,WAD6B,EAE7B,yBAF6B,EAG7ByE,GAAG,CAAC5B,GAAJ,CAAQ2M,mBAHqB,EAI7B3N,IAAI,CAACqG,SAAL,CAAewH,WAAf,CAJ6B,CAA/B;;AAMA,YAAMY,OAAO,GAAGC,6BAAkBC,iBAAlB,CAAoCxQ,WAApC,EAAiDyE,GAAjD,CAAhB;;AACA,YAAM;AAAEgM,QAAAA;AAAF,UAA0BC,YAAY,GAACC,QAAb,CAAsBL,OAAtB,CAAhC;AACA,YAAMM,QAAQ,GAACC,WAAT,CAAqBJ,mBAArB,EAA0C,SAA1C,EAAsDK,UAAD,IAAqB;AAC9EA,QAAAA,UAAU,CAACzL,cAAX,GAA4BR,OAAO,CAACQ,cAApC;AACA,eAAOyL,UAAP;AACD,OAHK,CAAN;AAID;;AAED,QAAIrM,GAAG,CAACnC,OAAJ,IAAemC,GAAG,CAACnC,OAAJ,CAAYkN,mBAA/B,EAAoD;AAClD,YAAMxH,yBAAyB,CAC7BhI,WAD6B,EAE7B,6BAF6B,EAG7ByE,GAAG,CAACnC,OAAJ,CAAYkN,mBAHiB,EAI7B3N,IAAI,CAACqG,SAAL,CAAeuH,eAAf,CAJ6B,CAA/B;AAMD,KA1ED,CA4EA;AACA;;;AACA,QAAIhL,GAAG,CAACnC,OAAJ,IAAemC,GAAG,CAACnC,OAAJ,CAAYkN,mBAA3B,IAAkD/K,GAAG,CAACnC,OAAJ,CAAYyO,iBAAlE,EAAqF;AACnF,UAAIC,eAAe,GAAG/P,QAAQ,CAAChB,GAAT,CAAagR,OAAb,CAAqB,QAArB,EAA+B,UAA/B,CAAtB;;AACA,UAAIC,aAAa,GAAGvO,gBAAKsF,IAAL,CAClBjI,WADkB,EAElB,SAFkB,EAGlB,KAHkB,EAIlB,KAJkB,EAKlB,MALkB,EAMlB,MANkB,EAOlB,MAPkB,EAQlB,KARkB,EASlB,UATkB,EAUlB,WAVkB,EAWlB,mBAXkB,CAApB;;AAaA,YAAM2P,aAAa,GAACwB,sBAAd,CACH,0BADG,EAEH,wBAFG,EAGJD,aAHI,CAAN;AAKA,YAAMvB,aAAa,GAACyB,cAAd,CACJ,gCADI,EAEH;;;gEAGuDJ,eAAgB;gEAChBvB,eAAe,CAACpE,SAAU;kCAN9E,EAQJ6F,aARI,CAAN;AAUA,YAAMvB,aAAa,GAACyB,cAAd,CACJ,2BADI,EAEH,sBAAqBvM,OAAO,CAACQ,cAAe,GAFzC,EAGJ6L,aAHI,CAAN;AAKD;AACF,GA5MsD,CA8MvD;;;AACA,MAAIzM,GAAG,CAAC4M,QAAR,EAAkB;AAChB,UAAMC,2BAA2B,CAAC;AAChC9D,MAAAA,IADgC;AAEhC/I,MAAAA,GAFgC;AAGhCzE,MAAAA,WAHgC;AAIhCC,MAAAA,GAAG,EAAEgB,QAAQ,CAAChB;AAJkB,KAAD,CAAjC;AAMD;;AAED,SAAO,EACL,GAAGgB,QADE;AAELhB,IAAAA,GAAG,EACD4E,OAAO,CAACQ,cAAR,IAA0BR,OAAO,CAACQ,cAAR,KAA2B,SAArD,GACK,GAAEpE,QAAQ,CAAChB,GAAI,oBAAmB4E,OAAO,CAACQ,cAAe,EAD9D,GAEIpE,QAAQ,CAAChB;AALV,GAAP;AAOD;;AAED,eAAekP,qBAAf,CAAqC;AACnC1K,EAAAA,GADmC;AAEnCkE,EAAAA,SAFmC;AAGnCC,EAAAA,aAHmC;AAInC/D,EAAAA,OAJmC;AAKnCC,EAAAA;AALmC,CAArC,EAYG;AACD6C,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,8BAAnB;;AACA,MAAItE,QAAQ,GAAG,KAAIC,mBAAJ,GAAf;AAEAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BvD,IAAI,CAACqG,SAAL,CAAezD,GAAf,CAA3B;AACAS,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BvD,IAAI,CAACqG,SAAL,CAAepD,GAAf,CAA/B;AACAI,EAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6BuD,SAA7B,EAAwC,WAAxC;AACAzD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiCwD,aAAjC,EAAgD,eAAhD;AACA1D,EAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BvD,IAAI,CAACqG,SAAL,CAAerD,OAAf,CAA3B;AACA,MAAI5D,QAAQ,GAAG,MAAMsE,eAAIC,eAAJ,CAAoB,SAApB,EAA+B,IAA/B,EAAqC,KAArC,EAA4C,IAA5C,EAAkD;AACrEN,IAAAA;AADqE,GAAlD,CAArB;AAGA,SAAOjE,QAAP;AACD;;AAED,eAAeqH,2BAAf,CAA2CtI,WAA3C,EAAgE;AAC9DK,EAAAA,uBAAuB,CAACL,WAAD,CAAvB,CAD8D,CAG9D;;;AACA,MAAIuR,YAAY,GAAG,MAAM1R,eAAe,GAACC,qBAAhB,CAAsCE,WAAtC,CAAzB;;AACA,MAAI,CAACuR,YAAY,CAAC5R,YAAlB,EAAgC;AAC9BqC,IAAAA,YAAY,GAACsC,UAAb,CACEtE,WADF,EAEE,MAFF,EAGE,uDAHF;AAKA,UAAMwR,2BAA2B,CAACxR,WAAD,EAAc;AAAEyR,MAAAA,KAAK,EAAE;AAAT,KAAd,CAAjC;AACD;AACF;;AAED,eAAe/H,yBAAf,CACE1J,WADF,EAEE6E,OAFF,EAMG;AACD,MAAI6M,MAAM,GAAGC,eAAIC,MAAJ,GAAapG,IAAb,CAAkB;AAC7BnG,IAAAA,cAAc,EAAEsM,eAAIE,MAAJ;AADa,GAAlB,CAAb,CADC,CAKD;;;AACA,QAAM;AAAElQ,IAAAA;AAAF,MAAYgQ,eAAIG,QAAJ,CAAajN,OAAb,EAAsB6M,MAAtB,CAAlB;;AACA,MAAI/P,KAAJ,EAAW;AACT,UAAM,KAAIrB,mBAAJ,EAAa,iBAAb,EAAgCqB,KAAK,CAACoQ,QAAN,EAAhC,CAAN;AACD;;AACDlN,EAAAA,OAAO,CAACQ,cAAR,GAAyBR,OAAO,CAACQ,cAAR,IAA0B,SAAnD,CAVC,CAU6D;AAE9D;;AACA,QAAM;AAAEZ,IAAAA,GAAF;AAAOK,IAAAA;AAAP,MAAe,MAAM,mCAAoB9E,WAApB,CAA3B;;AAEA,MAAIyE,GAAG,CAACnC,OAAJ,IAAemC,GAAG,CAACnC,OAAJ,CAAY4N,MAA/B,EAAuC;AACrC,WAAOzL,GAAG,CAACnC,OAAJ,CAAY4N,MAAnB;AACD;;AAED,MAAIzL,GAAG,CAAC5B,GAAJ,IAAW4B,GAAG,CAAC5B,GAAJ,CAAQqN,MAAvB,EAA+B;AAC7B,WAAOzL,GAAG,CAAC5B,GAAJ,CAAQqN,MAAf;AACD;;AAED,QAAM;AAAE9M,IAAAA;AAAF,MAAiBqB,GAAvB;;AAEA,MAAI,CAACrB,UAAL,EAAiB;AACf,UAAM,KAAI9C,mBAAJ,EAAa,iBAAb,EAAiC,mCAAkCmE,GAAG,CAACrB,UAAW,IAAlF,CAAN;AACD,GA3BA,CA6BD;;;AACA,MAAIA,UAAU,KAAK,aAAf,IAAgC,CAAC,uCAArC,EAAkE;AAChE,UAAM,KAAI9C,mBAAJ,EAAa,iBAAb,EAAgC,6CAAhC,CAAN;AACD;;AACDmE,EAAAA,GAAG,CAACuN,OAAJ,GAAc,MAAMrC,aAAa,GAACsC,uBAAd,CAAsCxN,GAAtC,CAApB;AACA,SAAO;AAAEA,IAAAA,GAAG,EAAE,EAAE,GAAGA,GAAL;AAAUrB,MAAAA;AAAV,KAAP;AAA+B0B,IAAAA;AAA/B,GAAP;AACD,C,CAED;;;AACA,eAAe+D,yBAAf,CAAyC7I,WAAzC,EAA8DkS,IAA9D,EAAsF;AACpF,MAAIC,UAAU,GAAG,MAAMC,GAAG,GAACC,wBAAJ,CAA6BrS,WAA7B,CAAvB;AACA,MAAIsS,UAAU,GAAG,MAAMpS,QAAQ,GAACqS,wBAAT,CACrBvS,WADqB,EAErBmS,UAFqB,EAGrBK,SAHqB,EAIrBN,IAJqB,CAAvB;;AAOAvK,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,qBAAnB;;AACA,MAAIb,SAAS,GAAG,MAAMhI,oBAAoB,CAACX,WAAD,EAAcsS,UAAd,EAA0B,KAA1B,EAAiC;AACzEzR,IAAAA,SAAS,EAAE,gBAD8D;AAEzEC,IAAAA,SAAS,EAAEjC;AAF8D,GAAjC,CAA1C;;AAKA8I,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,yBAAnB;;AACA,MAAIZ,aAAa,GAAG,MAAMjI,oBAAoB,CAACX,WAAD,EAAcsS,UAAd,EAA0B,SAA1B,EAAqC;AACjFzR,IAAAA,SAAS,EAAE,gBADsE;AAEjFC,IAAAA,SAAS,EAAEjC;AAFsE,GAArC,CAA9C;AAKA,SAAO;AAAE8J,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAP;AACD;;AAED,eAAeoG,0BAAf,CACEhP,WADF,EAEEyE,GAFF,EAGEI,OAAO,GAAG;AAAEoK,EAAAA,KAAK,EAAE;AAAT,CAHZ,EAIE;AACA,MAAIpK,OAAO,CAACoK,KAAZ,EAAmB;AACjB,WAAOrD,qBAAqB,CAAC5L,WAAD,EAAcyE,GAAd,CAA5B;AACD,GAFD,MAEO;AACL,WAAO;AAAEiH,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,gBAAgB,EAAE;AAAxC,KAAP;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;;;AACA,eAAeC,qBAAf,CAAqC5L,WAArC,EAA0DyE,GAA1D,EAA2E;AACzE,MAAI0N,UAAU,GAAG,MAAMC,GAAG,GAACC,wBAAJ,CAA6BrS,WAA7B,CAAvB;AACA,MAAIyS,YAAY,GAAG,MAAMvS,QAAQ,GAACwS,0BAAT,CAAoC1S,WAApC,EAAiDmS,UAAjD,CAAzB;;AAEAxK,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,qBAAnB;;AACA,MAAIkC,YAAY,GAAG,MAAM/K,oBAAoB,CAACX,WAAD,EAAcyS,YAAd,EAA4B,KAA5B,EAAmC;AAC9E5R,IAAAA,SAAS,EAAE,gBADmE;AAE9EC,IAAAA,SAAS,EAAEjC;AAFmE,GAAnC,CAA7C;AAKA,MAAI8M,gBAAgB,GAAG,MAAMhL,oBAAoB,CAACX,WAAD,EAAcyS,YAAd,EAA4B,SAA5B,EAAuC;AACtF5R,IAAAA,SAAS,EAAE,gBAD2E;AAEtFC,IAAAA,SAAS,EAAEjC;AAF2E,GAAvC,CAAjD;AAKA,SAAO;AAAE6M,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;AACD;AAED;;;;;;;;;;;AASA,eAAegH,cAAf,CACE3S,WADF,EAEEyE,GAFF,EAGEmO,iBAHF,EAIoB;AAClB,MAAIT,UAAU,GAAG,MAAMC,GAAG,GAACC,wBAAJ,CAA6BrS,WAA7B,CAAvB;AACA,MAAI6S,SAAS,GAAG,MAAM3S,QAAQ,GAAC4S,uBAAT,CAAiC9S,WAAjC,EAA8CmS,UAA9C,CAAtB;AAEA,MAAIY,aAAa,GAAG,MAAMpS,oBAAoB,CAACX,WAAD,EAAc6S,SAAd,EAAyB,KAAzB,EAAgC;AAC5EhS,IAAAA,SAAS,EAAE;AADiE,GAAhC,CAA9C;AAIA,MAAImS,iBAAiB,GAAG,MAAMrS,oBAAoB,CAACX,WAAD,EAAc6S,SAAd,EAAyB,SAAzB,EAAoC;AACpFhS,IAAAA,SAAS,EAAE;AADyE,GAApC,CAAlD,CARkB,CAYlB;AACA;;AACA,QAAMoS,cAAuB,GAAG,EAAhC;AACA,QAAMnQ,sBAAsB,CAC1B9C,WAD0B,EAE1ByE,GAF0B,EAG1B,MAAO4I,SAAP,IAA6B;AAC3B,UAAM6F,YAAY,GAAGvQ,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BqN,SAA1B,CAArB;;AACA,UAAM7K,QAAQ,GAAG,MAAMC,mBAAGC,QAAH,CAAYwQ,YAAZ,CAAvB;AACA,UAAMlJ,IAAI,GAAG,uBAAOxH,QAAP,CAAb;AACAyQ,IAAAA,cAAc,CAAC1M,IAAf,CAAoB;AAAEwG,MAAAA,KAAK,EAAE,CAACmG,YAAD,CAAT;AAAyBlG,MAAAA,UAAU,EAAE,CAAChD,IAAD,CAArC;AAA6CA,MAAAA;AAA7C,KAApB;AACA,WAAO,wBAAQ4I,iBAAR,EAA2B5I,IAA3B,CAAP;AACD,GATyB,EAU1B,IAV0B,CAA5B,CAfkB,CA4BlB;;AACA,QAAMmJ,SAAS,GAAGtR,IAAI,CAACC,KAAL,CAAWiR,aAAX,CAAlB;AACA,QAAMK,aAAa,GAAGvR,IAAI,CAACC,KAAL,CAAWkR,iBAAX,CAAtB;AACA,SAAOG,SAAS,CAACE,MAAV,CAAiBD,aAAjB,EAAgCC,MAAhC,CAAuCJ,cAAvC,CAAP;AACD;AAED;;;;;;;;AAMA,eAAeK,sBAAf,CAAsCtT,WAAtC,EAA2DyE,GAA3D,EAA4EkF,MAA5E,EAA6F;AAC3F;AACA,QAAMvH,0BAA0B,CAACpC,WAAD,EAAcyE,GAAd,CAAhC,CAF2F,CAI3F;AACA;AACA;AACA;;AACA,MAAIA,GAAG,CAAC8O,mBAAR,EAA6B;AAC3B,UAAMC,YAAsB,GAAG/O,GAAG,CAAC8O,mBAAJ,CAAwB5P,GAAxB,CAA6B2J,CAAD,IACzD3K,gBAAKsF,IAAL,CAAUjI,WAAV,EAAuBsN,CAAvB,CAD6B,CAA/B;;AAGA3F,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB,mCAAnB;;AACAgK,IAAAA,YAAY,CAACrP,OAAb,CAAqBmJ,CAAC,IAAI3F,kBAAOC,MAAP,CAAc4B,IAAd,CAAmB,OAAO8D,CAA1B,CAA1B,EAL2B,CAM3B;AACA;;AACA,UAAMmG,aAAa,GAAG,IAAIC,GAAJ,EAAtB;;AACA,SAAK,MAAM3J,KAAX,IAAoBJ,MAApB,EAA4B;AAC1B,YAAMiF,IAAI,GAAG7E,KAAK,CAACgD,KAAN,IAAehD,KAAK,CAACgD,KAAN,CAAY,CAAZ,CAA5B;AACA,YAAM4G,YAAY,GAChB,sBAAsB5J,KAAtB,IACAA,KAAK,CAAC6J,gBADN,IAEAhF,IAFA,IAGA4E,YAAY,CAACK,IAAb,CAAmBvG,CAAD,IAAe,0BAAUsB,IAAV,EAAgBtB,CAAhB,CAAjC,CAJF;AAKAtL,MAAAA,YAAY,GAACmL,QAAb,CACEnN,WADF,EAEE,MAFF,EAGG,GAAE2T,YAAY,GAAG,SAAH,GAAe,SAAU,UAAS/E,IAAK,EAHxD;;AAKA,UAAI+E,YAAJ,EAAkB;AAChB5J,QAAAA,KAAK,CAACiD,UAAN,CAAiB7I,OAAjB,CAAyB6F,IAAI,IAC3ByJ,aAAa,CAACK,GAAd,CACE,WAAW9J,IAAX,IAAmB,UAAUD,KAAV,IAAmBA,KAAK,CAACgK,IAAzB,GAAgC,MAAMhK,KAAK,CAACgK,IAA5C,GAAmD,EAAtE,CADF,CADF;AAKD;AACF;;AACDtP,IAAAA,GAAG,CAACgP,aAAJ,GAAoB,CAAC,GAAGA,aAAJ,CAApB;AACA,WAAOhP,GAAG,CAAC8O,mBAAX;AACD;;AAED,SAAO9O,GAAP;AACD;;AAED,eAAesK,0BAAf,CAA0C/O,WAA1C,EAA+DyE,GAA/D,EAAkF;AAChFkD,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,kBAAnB;;AAEA,QAAMwK,YAAY,GAAG,wBAAQpV,QAAR,EAAkB,SAAlB,CAArB;AACA,QAAM+K,MAAM,GAAG,MAAMgJ,cAAc,CAAC3S,WAAD,EAAcyE,GAAd,EAAmBuP,YAAnB,CAAnC;;AAEArM,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,kBAAnB;;AAEA,MAAIG,MAAM,CAACxH,MAAP,GAAgB,CAAhB,IAAqBwH,MAAM,CAAC,CAAD,CAAN,CAAUqD,UAAnC,EAA+C;AAC7C,UAAMiH,iBAAiB,CAACjU,WAAD,EAAc2J,MAAd,CAAvB;AACD,GAFD,MAEO;AACLhC,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB;AAAE4D,MAAAA,KAAK,EAAE;AAAT,KAAnB,EAAoC,+BAApC;AACD,GAZ+E,CAchF;;;AACA,QAAMkG,sBAAsB,CAACtT,WAAD,EAAcyE,GAAd,EAAmBkF,MAAnB,CAA5B;AAEA,SAAOlF,GAAP;AACD;;AAED,eAAemF,wBAAf,CACE5J,WADF,EAEEyE,GAFF,EAGEyP,SAHF,EAIEvO,SAJF,EAKE;AACAgC,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,kBAAnB;;AAEA,QAAMwK,YAAY,GAAG,wBAAQE,SAAR,EAAmB,QAAnB,CAArB;AACA,QAAMvK,MAAM,GAAG,MAAMgJ,cAAc,CAAC3S,WAAD,EAAcyE,GAAd,EAAmBuP,YAAnB,CAAnC;;AAEArM,oBAAOC,MAAP,CAAc4B,IAAd,CAAmB,eAAnB;;AAEA,MAAIG,MAAM,CAACxH,MAAP,GAAgB,CAAhB,IAAqBwH,MAAM,CAAC,CAAD,CAAN,CAAUqD,UAAnC,EAA+C;AAC7C,UAAMH,eAAe,CAAC7M,WAAD,EAAc2J,MAAd,EAAsBhE,SAAtB,CAArB;AACD,GAFD,MAEO;AACLgC,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB;AAAE4D,MAAAA,KAAK,EAAE;AAAT,KAAnB,EAAoC,+BAApC;AACD,GAZD,CAcA;;;AACA,QAAMkG,sBAAsB,CAACtT,WAAD,EAAcyE,GAAd,EAAmBkF,MAAnB,CAA5B;AAEA,SAAO;AAAElF,IAAAA,GAAF;AAAOkF,IAAAA;AAAP,GAAP;AACD;;AAED,eAAe3B,yBAAf,CACEhI,WADF,EAEEmU,OAFF,EAGEC,YAHF,EAIEC,QAJF,EAKE;AACA,QAAMC,WAAW,GAAG3R,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BoU,YAA1B,CAApB;;AACA,MAAI,CAAC3R,mBAAGqB,UAAH,CAAcnB,gBAAK4R,OAAL,CAAaD,WAAb,CAAd,CAAL,EAA+C;AAC7C,UAAME,QAAQ,GAAGL,OAAO,GACnB,uBAAsBG,WAAY,sCADf,GAEnB,sBAAqBH,OAAQ,KAAIG,WAAY,sCAFlD;;AAGA3M,sBAAOC,MAAP,CAAcwI,IAAd,CAAmBoE,QAAnB;AACD,GALD,MAKO;AACL,UAAM/R,mBAAGgS,SAAH,CAAaH,WAAb,EAA0BD,QAA1B,CAAN;AACD;AACF;;AAED,eAAe9E,+BAAf,CAA+C;AAC7C9K,EAAAA,GAD6C;AAE7CzE,EAAAA,WAF6C;AAG7C2I,EAAAA,SAH6C;AAI7CC,EAAAA,aAJ6C;AAK7C8C,EAAAA,YAL6C;AAM7CC,EAAAA;AAN6C,CAA/C,EAcG;AACD,MAAIlH,GAAG,CAACnC,OAAJ,IAAemC,GAAG,CAACnC,OAAJ,CAAYyO,iBAA/B,EAAkD;AAChD,UAAM/I,yBAAyB,CAC7BhI,WAD6B,EAE7B,2BAF6B,EAG7ByE,GAAG,CAACnC,OAAJ,CAAYyO,iBAHiB,EAI7BnI,aAJ6B,CAA/B;AAMD;;AAED,MAAInE,GAAG,CAAC5B,GAAJ,IAAW4B,GAAG,CAAC5B,GAAJ,CAAQkO,iBAAvB,EAA0C;AACxC,UAAM/I,yBAAyB,CAC7BhI,WAD6B,EAE7B,uBAF6B,EAG7ByE,GAAG,CAAC5B,GAAJ,CAAQkO,iBAHqB,EAI7BpI,SAJ6B,CAA/B;AAMD;;AAED,MAAIlE,GAAG,CAACnC,OAAJ,IAAemC,GAAG,CAACnC,OAAJ,CAAY4M,oBAA3B,IAAmDvD,gBAAvD,EAAyE;AACvE,UAAM3D,yBAAyB,CAC7BhI,WAD6B,EAE7B,8BAF6B,EAG7ByE,GAAG,CAACnC,OAAJ,CAAY4M,oBAHiB,EAI7BvD,gBAJ6B,CAA/B;AAMD;;AAED,MAAIlH,GAAG,CAAC5B,GAAJ,IAAW4B,GAAG,CAAC5B,GAAJ,CAAQqM,oBAAnB,IAA2CxD,YAA/C,EAA6D;AAC3D,UAAM1D,yBAAyB,CAC7BhI,WAD6B,EAE7B,0BAF6B,EAG7ByE,GAAG,CAAC5B,GAAJ,CAAQqM,oBAHqB,EAI7BxD,YAJ6B,CAA/B;AAMD;AACF;;AAED,eAAe4F,2BAAf,CAA2C;AACzCtR,EAAAA,WADyC;AAEzCwN,EAAAA,IAFyC;AAGzC/I,EAAAA,GAHyC;AAIzCxE,EAAAA;AAJyC,CAA3C,EAUG;AACD,MAAIyU,eAAe,GAAI,GAAEvG,kBAAOwG,GAAP,CAAWC,MAAO,MAAKzG,kBAAOwG,GAAP,CAAWE,IAAK,EAAhE;;AACA,MAAI1G,kBAAOwG,GAAP,CAAWlU,IAAf,EAAqB;AACnBiU,IAAAA,eAAe,GAAI,GAAEA,eAAgB,IAAGvG,kBAAOwG,GAAP,CAAWlU,IAAK,EAAxD;AACD;;AACDiU,EAAAA,eAAe,GAAI,GAAEA,eAAgB,KAAIlH,IAAI,CAACxC,QAAS,IAAGvG,GAAG,CAACM,IAAK,SAAnE;;AAEA,MAAIN,GAAG,CAACqQ,MAAJ,CAAWC,mBAAf,EAAoC;AAClC,QAAI1S,QAAQ,GAAG,MAAMsN,aAAa,GAACC,gBAAd,CAA+B3P,GAA/B,EAAoC;AACvD,8BAAwBwE,GAAG,CAACrB,UAD2B;AAEvD,2BAAqB,SAFkC;AAGvDyM,MAAAA,MAAM,EAAE;AAH+C,KAApC,CAArB;AAKAxN,IAAAA,QAAQ,CAACgJ,SAAT,GAAqBqJ,eAArB;AACArS,IAAAA,QAAQ,CAACe,UAAT,GAAsB,aAAtB;AACA,UAAMX,mBAAGgS,SAAH,CACJ9R,gBAAKC,OAAL,CAAa5C,WAAb,EAA0ByE,GAAG,CAACqQ,MAAJ,CAAWC,mBAArC,CADI,EAEJlT,IAAI,CAACqG,SAAL,CAAe7F,QAAf,CAFI,CAAN;AAID;;AAED,MAAIoC,GAAG,CAACqQ,MAAJ,CAAWE,eAAf,EAAgC;AAC9B,QAAI3S,QAAQ,GAAG,MAAMsN,aAAa,GAACC,gBAAd,CAA+B3P,GAA/B,EAAoC;AACvD,8BAAwBwE,GAAG,CAACrB,UAD2B;AAEvD,2BAAqB,KAFkC;AAGvDyM,MAAAA,MAAM,EAAE;AAH+C,KAApC,CAArB;AAKAxN,IAAAA,QAAQ,CAACgJ,SAAT,GAAqBqJ,eAArB;AACArS,IAAAA,QAAQ,CAACe,UAAT,GAAsB,aAAtB;AACA,UAAMX,mBAAGgS,SAAH,CACJ9R,gBAAKC,OAAL,CAAa5C,WAAb,EAA0ByE,GAAG,CAACqQ,MAAJ,CAAWE,eAArC,CADI,EAEJnT,IAAI,CAACqG,SAAL,CAAe7F,QAAf,CAFI,CAAN;AAID;AACF,C,CAED;;;AACA,eAAe4R,iBAAf,CAAiCjU,WAAjC,EAAsD2J,MAAtD,EAAuE;AACrE;AACA,QAAMmD,KAAqC,GAAG,EAA9C;AACAnD,EAAAA,MAAM,CAACxF,OAAP,CAAe4F,KAAK,IAAI;AACtBA,IAAAA,KAAK,CAACgD,KAAN,CAAY5I,OAAZ,CAAoB,CAACxB,IAAD,EAAeyB,KAAf,KAAiC;AACnD0I,MAAAA,KAAK,CAAC/C,KAAK,CAACiD,UAAN,CAAiB5I,KAAjB,CAAD,CAAL,GAAiCzB,IAAjC;AACD,KAFD;AAGD,GAJD,EAHqE,CASrE;;AACA,QAAMsS,KAAK,GAAG,CAAC,MAAM1P,eAAIC,eAAJ,CAAoB,gBAApB,EAAsC,EAAtC,EAA0C,MAA1C,EAAkD;AACrEgG,IAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,CAAYsB,KAAZ;AAD+D,GAAlD,CAAP,EAEVoI,QAFJ;AAGA,QAAMC,OAAO,GAAG5J,MAAM,CAACC,IAAP,CAAYsB,KAAZ,EAAmBzJ,MAAnB,CAA0B6J,GAAG,IAAI,CAAC+H,KAAK,CAAC/H,GAAD,CAAL,CAAWkI,MAA7C,CAAhB;;AAEA,MAAID,OAAO,CAAChT,MAAR,KAAmB,CAAvB,EAA0B;AACxBwF,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB;AAAE4D,MAAAA,KAAK,EAAE;AAAT,KAAnB,EAAqC,6BAArC;AACD,GAjBoE,CAmBrE;;;AACA,QAAM3J,OAAO,CAACC,GAAR,CACJ,sBAAMyR,OAAN,EAAe,CAAf,EAAkBxR,GAAlB,CAAsB,MAAM6H,IAAN,IAAc;AAClC,QAAItG,QAAQ,GAAG,KAAIC,mBAAJ,GAAf;;AACA,SAAK,MAAM+H,GAAX,IAAkB1B,IAAlB,EAAwB;AACtBxJ,MAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,aAAY8M,KAAK,CAACI,GAAD,CAAM,EAAnE;AAEA,UAAImI,YAAY,GAAGvI,KAAK,CAACI,GAAD,CAAL,CAAW+D,OAAX,CAAmBjR,WAAnB,EAAgC,EAAhC,CAAnB;;AACA2H,wBAAOC,MAAP,CAAc4B,IAAd,CAAmB;AAAE4D,QAAAA,KAAK,EAAE;AAAT,OAAnB,EAAqC,aAAYiI,YAAa,EAA9D;;AAEAnQ,MAAAA,QAAQ,CAACE,MAAT,CAAgB8H,GAAhB,EAAqBzK,mBAAG6S,gBAAH,CAAoBxI,KAAK,CAACI,GAAD,CAAzB,CAArB,EAAsDJ,KAAK,CAACI,GAAD,CAA3D;AACD;;AACD,UAAM3H,eAAIC,eAAJ,CAAoB,cAApB,EAAoC,EAApC,EAAwC,KAAxC,EAA+C,IAA/C,EAAqD;AAAEN,MAAAA;AAAF,KAArD,CAAN;AACD,GAXD,CADI,CAAN;AAcD;;AAED,eAAeqQ,cAAf,CACEvV,WADF,EAEE6E,OASC,GAAG,EAXN,EAYE;AACA,MAAI,CAACA,OAAO,CAACuD,SAAb,EAAwB;AACtB;AACA,UAAM;AAAE3D,MAAAA,GAAF;AAAOK,MAAAA;AAAP,QAAe,MAAM,mCAAoB9E,WAApB,CAA3B;AACA,UAAMwV,UAAU,GAAG,8BAAexV,WAAf,CAAnB;AACA,WAAO;AACLyE,MAAAA,GADK;AAELK,MAAAA,GAFK;AAGL0Q,MAAAA,UAAU,EAAE,8BAAexV,WAAf,CAHP;AAILyV,MAAAA,YAAY,EAAED,UAAU,KAAK,UAAf,GAA4B,OAA5B,GAAsC;AAJ/C,KAAP;AAMD,GAVD,MAUO;AACL;AACA,WAAO;AACL/Q,MAAAA,GAAG,EAAE,MAAMiR,UAAU,GAACC,WAAX,CAAuB9Q,OAAO,CAACuD,SAA/B,EAA0CvD,OAA1C,CADN;AAEL2Q,MAAAA,UAAU,EAAE3Q,OAAO,CAACuD,SAFf;AAGLqN,MAAAA,YAAY,EAAE,EAHT;AAIL3Q,MAAAA,GAAG,EAAE;AAJA,KAAP;AAMD;AACF,C,CAED;;;AAsBO,eAAe8Q,UAAf,CACL5V,WADK,EAEL6E,OAUC,GAAG,EAZC,EAa4C;AACjD,QAAMoG,gBAAY8C,mBAAZ,EAAN;;AACA1N,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AAEAgO,EAAAA,SAAS,GAACC,QAAV,CAAmB,iBAAnB,EAAsC;AACpCjO,IAAAA,WADoC;AAEpCkO,IAAAA,aAAa,EAAEC,kBAAOD,aAFc;AAGpCtN,IAAAA,QAAQ,EAAEiE,OAAO,CAACjE;AAHkB,GAAtC;;AAMA,QAAM8Q,MAAM,GAAGC,eAAIC,MAAJ,GAAapG,IAAb,CAAkB;AAC/BqK,IAAAA,OAAO,EAAElE,eAAImE,OAAJ,EADsB;AAE/BC,IAAAA,IAAI,EAAEpE,eAAIE,MAAJ,EAFyB;AAG/BjR,IAAAA,QAAQ,EAAE+Q,eAAIqE,GAAJ,GAAUC,KAAV,CAAgB,KAAhB,EAAuB,SAAvB,EAAkC,KAAlC,CAHqB;AAI/BC,IAAAA,MAAM,EAAEvE,eAAIwE,KAAJ,EAJuB;AAK/BpC,IAAAA,IAAI,EAAEpC,eAAIqE,GAAJ,GAAUC,KAAV,CAAgB,SAAhB,EAA2B,WAA3B,EAAwC,QAAxC,EAAkD,YAAlD,EAAgE,KAAhE,CALyB;AAM/B5Q,IAAAA,cAAc,EAAEsM,eAAIE,MAAJ,GAAauE,KAAb,CAAmB,oBAAnB,CANe;AAO/BC,IAAAA,gBAAgB,EAAE1E,eAAIE,MAAJ,GAAauE,KAAb,CAAmB,2BAAnB,CAPa;AAQ/BhO,IAAAA,SAAS,EAAEuJ,eAAIE,MAAJ,EARoB;AAS/BzO,IAAAA,UAAU,EAAEuO,eAAI3O,MAAJ;AATmB,GAAlB,CAAf;;AAYA,QAAM;AAAErB,IAAAA;AAAF,MAAYgQ,eAAIG,QAAJ,CAAajN,OAAb,EAAsB6M,MAAtB,CAAlB;;AACA,MAAI/P,KAAJ,EAAW;AACT,UAAM,KAAIrB,mBAAJ,EAAa,iBAAb,EAAgCqB,KAAK,CAACoQ,QAAN,EAAhC,CAAN;AACD;;AAED,QAAM;AAAEtN,IAAAA,GAAF;AAAOK,IAAAA,GAAP;AAAY0Q,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,MAAyC,MAAMF,cAAc,CAACvV,WAAD,EAAc6E,OAAd,CAAnE;;AAEA,MAAI,CAACJ,GAAD,IAAQ,CAACK,GAAb,EAAkB;AAChB,UAAM,KAAIxE,mBAAJ,EACJ,iBADI,EAEH,iBAAgBkV,UAAW,uBAAsBxV,WAAY,EAF1D,CAAN;AAID,GAlCgD,CAoCjD;AACA;;;AACA,MAAI,CAACyE,GAAG,CAAC6R,OAAL,IAAgB,aAAaxR,GAA7B,IAAoCA,GAAG,CAACwR,OAA5C,EAAqD;AACnD7R,IAAAA,GAAG,CAAC6R,OAAJ,GAAcxR,GAAG,CAACwR,OAAlB;AACD;;AACD,MAAI,CAAC7R,GAAG,CAACM,IAAL,IAAa,UAAUD,GAAvB,IAA8BA,GAAG,CAACE,IAAtC,EAA4C;AAC1CP,IAAAA,GAAG,CAACM,IAAJ,GAAWD,GAAG,CAACE,IAAf;AACD;;AAED,MAAIH,OAAO,CAACkR,IAAR,KAAiB,QAAjB,KAA8BlR,OAAO,CAACjE,QAAR,KAAqB,KAArB,IAA8BiE,OAAO,CAACjE,QAAR,KAAqB,KAAjF,CAAJ,EAA6F;AAC3F,QAAI,CAAC6D,GAAG,CAAC5B,GAAL,IAAY,CAAC4B,GAAG,CAAC5B,GAAJ,CAAQwT,gBAAzB,EAA2C;AACzC,YAAM,KAAI/V,mBAAJ,EACJ,kBADI,EAEH,8EAAD,GACG,yBAAwBkV,UAAW,QAAOC,YAAa,uBAHtD,CAAN;AAKD;AACF;;AAED,MAAI5Q,OAAO,CAACkR,IAAR,KAAiB,QAAjB,KAA8BlR,OAAO,CAACjE,QAAR,KAAqB,SAArB,IAAkCiE,OAAO,CAACjE,QAAR,KAAqB,KAArF,CAAJ,EAAiG;AAC/F,QAAI,CAAC6D,GAAG,CAACnC,OAAL,IAAgB,CAACmC,GAAG,CAACnC,OAAJ,CAAYiU,OAAjC,EAA0C;AACxC,YAAM,KAAIjW,mBAAJ,EACJ,kBADI,EAEH,6EAAD,GACG,yBAAwBkV,UAAW,QAAOC,YAAa,kBAHtD,CAAN;AAKD;AACF;;AAED,SAAO,MAAMlQ,eAAIC,eAAJ,CAAoB,OAApB,EAA6B,EAA7B,EAAiC,KAAjC,EAAwC;AACnDnD,IAAAA,QAAQ,EAAEoC,GADyC;AAEnDI,IAAAA;AAFmD,GAAxC,CAAb;AAID;;AAED,eAAe2R,oBAAf,CACExW,WADF,EAEEC,GAFF,EAGEwW,OAAe,GAAG,GAHpB,EAIiB;AACf,MAAI;AACF,QAAIxV,QAAQ,GAAG,MAAMC,iBAAMC,GAAN,CAAUlB,GAAV,EAAe;AAClCmB,MAAAA,YAAY,EAAE,MADoB;AAElCG,MAAAA,KAAK,EAAE;AAF2B,KAAf,CAArB;;AAIA,QAAI,0BAA0BmV,IAA1B,CAA+BzV,QAAQ,CAACK,IAAxC,CAAJ,EAAmD;AACjD,aAAO,IAAP;AACD,KAFD,MAEO,IAAImV,OAAO,KAAK,CAAhB,EAAmB;AACxBzU,MAAAA,YAAY,GAACC,QAAb,CACEjC,WADF,EAEE,MAFF,EAGG,6DAA4DiB,QAAQ,CAACK,IAAK,EAH7E;AAKD;AACF,GAdD,CAcE,OAAOS,CAAP,EAAU;AACV,QAAI0U,OAAO,KAAK,CAAhB,EAAmB;AACjBzU,MAAAA,YAAY,GAACC,QAAb,CACEjC,WADF,EAEE,MAFF,EAGG,4CAA2C+B,CAAC,CAACG,OAAQ,EAHxD;AAKD;AACF;;AAED,MAAIuU,OAAO,IAAI,CAAf,EAAkB;AAChB,UAAM,IAAIzS,KAAJ,CAAU,qCAAV,CAAN;AACD,GAFD,MAEO;AACL,UAAM,2BAAW,GAAX,CAAN;AACA,WAAOwS,oBAAoB,CAACxW,WAAD,EAAcC,GAAd,EAAmBwW,OAAO,GAAG,CAA7B,CAA3B;AACD;AACF;;AAED,SAASE,kBAAT,CAA4B3W,WAA5B,EAAiD4W,KAAjD,EAAgEtV,IAAhE,EAA8E;AAC5E,MAAIuV,MAAM,GAAGvV,IAAI,CAACyQ,QAAL,EAAb;;AACA,MAAI,CAAC8E,MAAL,EAAa;AACX;AACD,GAJ2E,CAK5E;AACA;;;AACA,MAAIC,kCAAkC,CAAC9W,WAAD,EAAc4W,KAAd,EAAqBC,MAArB,CAAtC,EAAoE;AAClE7U,IAAAA,YAAY,GAACmL,QAAb,CACEnN,WADF,EAEE,MAFF,EAGG,wCAAuC6W,MAAO,EAHjD,EAIE,yCAJF;AAMA;AACD;;AACD,MAAIE,8BAA8B,CAACF,MAAD,CAA9B,IAA0CG,uBAAuB,CAACH,MAAD,CAArE,EAA+E;AAC7E7U,IAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA2C6W,MAA3C;AACA;AACD;;AAED,MAAI,qCAAqCH,IAArC,CAA0CG,MAA1C,CAAJ,EAAuD;AACrD7U,IAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,OAAnC,EAA4C6W,MAA5C;AACA;AACD;;AACD,MAAID,KAAK,KAAK,MAAd,EAAsB;AACpB5U,IAAAA,YAAY,GAACiV,OAAb,CAAqBjX,WAArB,EAAkC,OAAlC,EAA2C6W,MAA3C;AACD,GAFD,MAEO;AACL7U,IAAAA,YAAY,GAACC,QAAb,CAAsBjC,WAAtB,EAAmC,OAAnC,EAA4C6W,MAA5C;AACD;AACF;;AAED,SAASE,8BAAT,CAAwCF,MAAxC,EAAwD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,mCAAmCH,IAAnC,CAAwCG,MAAxC,CAAP;AACD;;AAED,SAASG,uBAAT,CAAiCH,MAAjC,EAAiD;AAC/C,SAAOA,MAAM,CAACK,UAAP,CACL,mGADK,CAAP;AAGD;;AAED,SAASJ,kCAAT,CACE9W,WADF,EAEE4W,KAFF,EAGEC,MAHF,EAIW;AACT,MACED,KAAK,KAAK,OAAV,IACA,CAACC,MAAM,CAACK,UAAP,CAAkB,mDAAlB,CAFH,EAGE;AACA,WAAO,KAAP;AACD;;AAED,MAAIC,0BAA0B,GAAGxU,gBAAKsF,IAAL,CAC/BjI,WAD+B,EAE/B,cAF+B,EAG/B,cAH+B,EAI/B,cAJ+B,CAAjC;;AAMA,MAAIoX,6BAA6B,GAAG,6BAAaD,0BAAb,CAApC;AACA,MAAIE,oCAAoC,GAAG,IAAIC,MAAJ,CACxC,UAASF,6BAA8B,oBAAmBA,6BAA8B,IADhD,CAA3C;AAGA,SAAOC,oCAAoC,CAACX,IAArC,CAA0CG,MAA1C,CAAP;AACD;;AAED,SAASU,iCAAT,CAA2C3V,IAA3C,EAAwD;AACtD,SAAOA,IAAI,CAACO,MAAL,KAAgB,CAAhB,IAAqBP,IAAI,CAAC,CAAD,CAAJ,KAAY,yBAAxC;AACD;;AAED,SAAS4V,4BAAT,CAAsC5V,IAAtC,EAAmD;AACjD,SACEA,IAAI,CAACO,MAAL,KAAgB,CAAhB,KACC,8CAA8CuU,IAA9C,CAAmD9U,IAAI,CAAC,CAAD,CAAvD,KACC,0BAA0B8U,IAA1B,CAA+B9U,IAAI,CAAC,CAAD,CAAnC,CAFF,CADF;AAKD;;AAED,SAAS6V,iBAAT,CAA2BzX,WAA3B,EAAgD0X,QAAhD,EAAkEC,UAAlE,EAAsFC,IAAtF,EAAiG;AAC/F,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACzV,MAAzB,EAAiC0V,CAAC,EAAlC,EAAsC;AACpC,QAAI9H,GAAG,GAAG6H,IAAI,CAACC,CAAD,CAAd;AACA,QAAIjW,IAAI,GAAG,OAAOmO,GAAG,CAACnO,IAAX,KAAoB,QAApB,GAA+B,CAACmO,GAAG,CAACnO,IAAL,CAA/B,GAA4CmO,GAAG,CAACnO,IAA3D;AACA,QAAI;AAAEgV,MAAAA;AAAF,QAAY7G,GAAhB;;AAEA,QAAIwH,iCAAiC,CAAC3V,IAAD,CAArC,EAA6C;AAC3CgV,MAAAA,KAAK,GAAGjP,kBAAOmQ,KAAf;AACD;;AACD,QAAIN,4BAA4B,CAAC5V,IAAD,CAAhC,EAAwC;AACtCA,MAAAA,IAAI,GAAG,CAAE,0BAAyB+V,UAAW,GAAtC,CAAP;AACD;;AAED,QAAI9F,MAAM,GAAGjQ,IAAI,CACd+B,GADU,CACLoU,GAAD,IAAc;AACjB,UAAI,OAAOA,GAAP,KAAe,WAAnB,EAAgC;AAC9B,eAAO,WAAP;AACD;;AACD,UAAIA,GAAG,KAAK,MAAZ,EAAoB;AAClB,eAAO,MAAP;AACD;;AACD,UAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA1C,IAAsD,OAAOA,GAAP,KAAe,SAAzE,EAAoF;AAClF,eAAOA,GAAP;AACD;;AACD,UAAI;AACF,eAAOlW,IAAI,CAACqG,SAAL,CAAe6P,GAAf,CAAP;AACD,OAFD,CAEE,OAAOhW,CAAP,EAAU;AACV,eAAOgW,GAAG,CAAChG,QAAJ,EAAP;AACD;AACF,KAhBU,EAiBV9J,IAjBU,CAiBL,GAjBK,CAAb;AAmBAjG,IAAAA,YAAY,GAACgW,YAAb,CACEhY,WADF,EAEE4W,KAFF,EAGE;AACEqB,MAAAA,GAAG,EAAE,QADP;AAEEP,MAAAA,QAFF;AAGEC,MAAAA,UAHF;AAIEO,MAAAA,UAAU,EAAEnI,GAAG,CAACmI,UAJlB;AAKEC,MAAAA,UAAU,EAAEpI,GAAG,CAACoI,UALlB;AAMEC,MAAAA,aAAa,EAAErI,GAAG,CAACqI;AANrB,KAHF,EAWEvG,MAXF;AAaD;AACF;;AACM,eAAeL,2BAAf,CACLxR,WADK,EAEL6E,OAAqB,GAAG,EAFnB,EAGLwT,OAAgB,GAAG,IAHd,EAIU;AACfhY,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AACA,QAAMsY,0BAA0B,CAACtY,WAAD,CAAhC;AACA,QAAMuY,QAAQ,GAACC,cAAT,EAAN,CAHe,CAGkB;;AACjC,QAAMD,QAAQ,GAACE,yBAAT,CAAmCzY,WAAnC,CAAN;AAEA,MAAI;AAAEyE,IAAAA;AAAF,MAAU,MAAM,mCAAoBzE,WAApB,CAApB;AAEA,MAAIL,YAAY,GAAG,MAAMY,iBAAiB,CAAC,KAAD,CAA1C,CARe,CAQoC;;AAEnD,MAAImY,qBAAJ;AAEA,QAAMC,uBAAuB,GAAG,gCAAiB,wBAAjB,EAA2C3Y,WAA3C,EAAwDyE,GAAxD,CAAhC;;AACA,MAAIkU,uBAAJ,EAA6B;AAC3BD,IAAAA,qBAAqB,GAAGC,uBAAxB;AACD,GAFD,MAEO;AACL;AACAhR,sBAAOC,MAAP,CAAcwI,IAAd,CAAoB,+DAApB;AACD;;AAED,MAAI7H,YAAoC,GAAG;AACzC9H,IAAAA,IAAI,EAAEd,YADmC;AAEzC+Y,IAAAA,qBAFyC;AAGzCE,IAAAA,SAAS,EAAE,CAAC,KAAD,CAH8B;AAIzC;AACAC,IAAAA,UAAU,EAAE,mCAAqB,EAArB,EAAyB;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,OAAO,EAAE,IAAvB;AAA6BC,MAAAA,QAAQ,EAAE;AAAvC,KAAzB;AAL6B,GAA3C;;AAQA,MAAInU,OAAO,CAACoU,aAAR,IAAyBC,QAAQ,GAACC,aAAT,CAAuB1U,GAAvB,EAA4B,QAA5B,CAA7B,EAAoE;AAClE8D,IAAAA,YAAY,CAAC0Q,aAAb,GAA6B,IAA7B;AACD;;AAED,MAAIC,QAAQ,GAACE,aAAT,CAAuB3U,GAAvB,EAA4B,QAA5B,CAAJ,EAA2C;AACzC8D,IAAAA,YAAY,CAAC8Q,YAAb,GAA4B,6BAAc,2BAAd,EAA2CrZ,WAA3C,EAAwDyE,GAAxD,CAA5B;AACD;;AAED,MAAII,OAAO,CAACyU,UAAZ,EAAwB;AACtB/Q,IAAAA,YAAY,CAAC,aAAD,CAAZ,GAA8B1D,OAAO,CAACyU,UAAtC;AACD;;AAED,MAAI,CAACJ,QAAQ,GAACE,aAAT,CAAuB3U,GAAvB,EAA4B,QAA5B,CAAL,EAA4C;AAC1C,WAAO8D,YAAY,CAACmQ,qBAApB;AACD;;AACD,QAAMa,gBAAgB,GAAG9U,GAAG,CAAC8D,YAA7B;;AACA,MAAIgR,gBAAJ,EAAsB;AACpB;AACA;AACA;AACA,QAAIA,gBAAgB,CAACrJ,MAArB,EAA6B;AAC3BqJ,MAAAA,gBAAgB,CAACrJ,MAAjB,GAA0BvN,gBAAKC,OAAL,CAAa5C,WAAb,EAA0BuZ,gBAAgB,CAACrJ,MAA3C,CAA1B;AACD;;AAED3H,IAAAA,YAAY,GAAG,EACb,GAAGA,YADU;AAEb,SAAGgR,gBAFU;AAGb,UAAGA,gBAAgB,CAACX,SAAjB,GACC;AACEA,QAAAA,SAAS,EAAE,qBAAK,CAAC,GAAGrQ,YAAY,CAACqQ,SAAjB,EAA4B,GAAGW,gBAAgB,CAACX,SAAhD,CAAL;AADb,OADD,GAIC,EAJJ;AAHa,KAAf;;AAUA,QAAIW,gBAAgB,CAAC9Y,IAAjB,KAA0B+R,SAA1B,IAAuC+G,gBAAgB,CAAC9Y,IAAjB,KAA0B,IAArE,EAA2E;AACzEd,MAAAA,YAAY,GAAG4Z,gBAAgB,CAAC9Y,IAAhC;AACD;AACF;;AACD,MAAI+Y,OAAO,GAAG,uBACZjR,YADY,EAEZ,CAAC2J,IAAD,EAAOuH,GAAP,EAAYvM,GAAZ,KAAoB;AAClB;AACA;AACA,QAAIuM,GAAG,IAAI,OAAOA,GAAP,KAAe,SAA1B,EAAqC;AACnCvH,MAAAA,IAAI,CAAC3L,IAAL,CAAW,KAAI2G,GAAI,EAAnB;AACD,KAFD,MAEO,IAAIuM,GAAJ,EAAS;AACdvH,MAAAA,IAAI,CAAC3L,IAAL,CAAW,KAAI2G,GAAI,EAAnB,EAAsBuM,GAAtB;AACD;;AACD,WAAOvH,IAAP;AACD,GAXW,EAYZ,CAAC,OAAD,CAZY,CAAd;;AAeA,MAAIrN,OAAO,CAAC4M,KAAZ,EAAmB;AACjB+H,IAAAA,OAAO,CAACjT,IAAR,CAAa,eAAb;AACD,GAnFc,CAmFb;;;AACF,MAAImT,cAAc,GAAG,6BAAc,+BAAd,EAA+C1Z,WAA/C,EAA4DyE,GAA5D,CAArB;AACA,QAAMkV,OAAO,GAAGlV,GAAG,CAACmV,SAAJ,IAAiBF,cAAjC;AACA,MAAIG,QAAJ,CAtFe,CAuFf;AACA;;AACA,MAAIpV,GAAG,CAACmV,SAAR,EAAmB;AACjBC,IAAAA,QAAQ,GAAGC,uBAAuB,CAAC9Z,WAAD,CAAlC;AACD,GAFD,MAEO;AACL6Z,IAAAA,QAAQ,GAAG,IAAX;AACD,GA7Fc,CA8Ff;AACA;AACA;AACA;;;AACA,MAAIE,eAAe,GAAGC,yBAAcC,IAAd,CAAmBN,OAAnB,EAA4BH,OAA5B,EAAqC;AACzDU,IAAAA,GAAG,EAAEla,WADoD;AAEzDma,IAAAA,GAAG,EAAE,EACH,GAAGC,OAAO,CAACD,GADR;AAEHE,MAAAA,qBAAqB,EAAEra,WAFpB;AAGHsa,MAAAA,oBAAoB,EAAE,GAHnB;AAIH,UAAGT,QAAQ,GAAG;AAAEU,QAAAA,SAAS,EAAEV;AAAb,OAAH,GAA6B,EAAxC;AAJG,KAFoD;AAQzDW,IAAAA,MAAM,EAAE;AARiD,GAArC,CAAtB;;AAUA,QAAM3a,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD;AACtDL,IAAAA,YADsD;AAEtD+a,IAAAA,WAAW,EAAEX,eAAe,CAACY;AAFyB,GAAlD,CAAN,CA5Ge,CA+GX;;AACJP,EAAAA,OAAO,CAACQ,EAAR,CAAW,MAAX,EAAmB,MAAM;AACvB,6BAASb,eAAe,CAACY,GAAzB;AACD,GAFD;;AAGA,MAAI,CAACZ,eAAe,CAACc,MAArB,EAA6B;AAC3B,UAAM,IAAI7W,KAAJ,CAAU,uEAAV,CAAN;AACD;;AACD,MAAI,CAAC+V,eAAe,CAACe,MAArB,EAA6B;AAC3B,UAAM,IAAI9W,KAAJ,CAAU,uEAAV,CAAN;AACD;;AACD+V,EAAAA,eAAe,CAACc,MAAhB,CAAuBE,WAAvB,CAAmC,MAAnC;AACAhB,EAAAA,eAAe,CAACe,MAAhB,CAAuBC,WAAvB,CAAmC,MAAnC;AACAhB,EAAAA,eAAe,CAACc,MAAhB,CAAuBG,IAAvB,CAA4B,uBAA5B,EAAqCJ,EAArC,CAAwC,MAAxC,EAAgDtZ,IAAI,IAAI;AACtD,QAAI+W,OAAJ,EAAa;AACX1B,MAAAA,kBAAkB,CAAC3W,WAAD,EAAc,MAAd,EAAsBsB,IAAtB,CAAlB;AACD;AACF,GAJD;AAKAyY,EAAAA,eAAe,CAACe,MAAhB,CAAuBF,EAAvB,CAA0B,MAA1B,EAAkCtZ,IAAI,IAAI;AACxC,QAAI+W,OAAJ,EAAa;AACX1B,MAAAA,kBAAkB,CAAC3W,WAAD,EAAc,OAAd,EAAuBsB,IAAvB,CAAlB;AACD;AACF,GAJD;AAKA,MAAI2Z,WAAW,GAAG,IAAIxX,OAAJ,CAAY,CAACb,OAAD,EAAUsY,MAAV,KAAqB;AACjDnB,IAAAA,eAAe,CAACoB,IAAhB,CAAqB,MAArB,EAA6B,MAAMC,IAAN,IAAc;AACzCpZ,MAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,0CAAyCob,IAAK,EAA1F;;AACA,UAAIA,IAAJ,EAAU;AACRF,QAAAA,MAAM,CAAC,IAAIlX,KAAJ,CAAW,0CAAyCoX,IAAK,EAAzD,CAAD,CAAN;AACD,OAFD,MAEO;AACLxY,QAAAA,OAAO;AACR;;AACD,UAAI;AACF,cAAM/C,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD;AACtDL,UAAAA,YAAY,EAAE,IADwC;AAEtD+a,UAAAA,WAAW,EAAE;AAFyC,SAAlD,CAAN;AAID,OALD,CAKE,OAAO3Y,CAAP,EAAU,CAAE;AACf,KAbD;AAcD,GAfiB,CAAlB;AAgBA,MAAIsZ,WAAW,GAAG,MAAMnb,QAAQ,GAACob,uBAAT,CAAiCtb,WAAjC,EAA8C;AACpEub,IAAAA,OAAO,EAAE,MAD2D;AAEpEC,IAAAA,QAAQ,EAAE;AAF0D,GAA9C,CAAxB;AAIA,QAAM/X,OAAO,CAACgY,IAAR,CAAa,CAACjF,oBAAoB,CAACxW,WAAD,EAAe,GAAEqb,WAAY,SAA7B,CAArB,EAA6DJ,WAA7D,CAAb,CAAN;AACD,C,CAED;AACA;AACA;;;AACA,SAASnB,uBAAT,CAAiC9Z,WAAjC,EAA8D;AAC5D,MAAI8M,KAAK,GAAG,EAAZ;;AACA,MAAI4O,SAAS,GAAG/Y,gBAAKC,OAAL,CAAa5C,WAAb,CAAhB;;AACA,SAAO,IAAP,EAAa;AACX8M,IAAAA,KAAK,CAACvG,IAAN,CAAW5D,gBAAKsF,IAAL,CAAUyT,SAAV,EAAqB,cAArB,CAAX;;AACA,QAAIC,eAAe,GAAGhZ,gBAAK4R,OAAL,CAAamH,SAAb,CAAtB;;AACA,QAAIA,SAAS,KAAKC,eAAlB,EAAmC;AACjC;AACD;;AACDD,IAAAA,SAAS,GAAGC,eAAZ;AACD;;AACD,SAAO7O,KAAK,CAAC7E,IAAN,CAAWtF,gBAAKiZ,SAAhB,CAAP;AACD;;AACM,eAAetD,0BAAf,CAA0CtY,WAA1C,EAA8E;AACnFK,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AACA,MAAIuR,YAAY,GAAG,MAAM1R,eAAe,GAACC,qBAAhB,CAAsCE,WAAtC,CAAzB;;AACA,MAAI,CAACuR,YAAY,CAAC5R,YAAd,IAA8B,CAAC4R,YAAY,CAACmJ,WAAhD,EAA6D;AAC3D1Y,IAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,oCAAmCA,WAAY,GAA3F;AACA;AACD;;AACDgC,EAAAA,YAAY,GAACmL,QAAb,CACEnN,WADF,EAEE,MAFF,EAGG,kCAAiCuR,YAAY,CAACmJ,WAAY,EAH7D;;AAKA,MAAI;AACF,UAAM3b,aAAa,CAACwS,YAAY,CAACmJ,WAAd,EAA2B,SAA3B,CAAnB;AACD,GAFD,CAEE,OAAO3Y,CAAP,EAAU;AACVC,IAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,oCAAmC+B,CAAC,CAACgQ,QAAF,EAAa,EAA5F;AACD;;AACD,QAAMlS,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD;AACtDL,IAAAA,YAAY,EAAE,IADwC;AAEtD+a,IAAAA,WAAW,EAAE;AAFyC,GAAlD,CAAN;AAID;;AAED,IAAImB,+BAA+B,GAAG,IAAInI,GAAJ,CAAQ,CAC5C,qBAD4C,EAE5C,2BAF4C,EAG5C,gCAH4C,EAI5C,4BAJ4C,EAK5C,4BAL4C,EAM5C,mBAN4C,CAAR,CAAtC;;AASA,SAASoI,yCAAT,CAAmD5O,GAAnD,EAAgE;AAC9D,MAAI2O,+BAA+B,CAACE,GAAhC,CAAoC7O,GAAG,CAAC8O,WAAJ,EAApC,CAAJ,EAA4D;AAC1D,WAAO,KAAP;AACD;;AACD,SAAO9O,GAAG,CAACgK,UAAJ,CAAe,eAAf,KAAmChK,GAAG,CAACgK,UAAJ,CAAe,OAAf,CAA1C;AACD;;AAEM,eAAe+E,oBAAf,CAAoCjc,WAApC,EAAwE;AAC7EK,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AACA,QAAMkc,mBAAmB,CAAClc,WAAD,CAAzB;AACA,MAAImc,GAAG,GAAG,yBAAV;AACAA,EAAAA,GAAG,CAACC,GAAJ,CACEC,mBAAQC,IAAR,CAAa;AACXC,IAAAA,KAAK,EAAE;AADI,GAAb,CADF;AAKAJ,EAAAA,GAAG,CAACC,GAAJ,CACEC,mBAAQG,UAAR,CAAmB;AACjBD,IAAAA,KAAK,EAAE,MADU;AAEjBE,IAAAA,QAAQ,EAAE;AAFO,GAAnB,CADF;;AAMA,MAAI,CAAC,MAAMpO,MAAM,GAACC,wBAAP,CAAgCtO,WAAhC,CAAP,MAAyDqO,MAAM,GAACG,KAApE,EAA2E;AACzE,UAAM,IAAIxK,KAAJ,CAAW,wEAAX,CAAN;AACD,GAjB4E,CAiB3E;;;AACF,QAAM0Y,eAAe,GAAG,OAAOC,GAAP,EAA6BC,GAA7B,KAAuD;AAC7E,QAAI;AACF;AACA;AACA;AACAvO,MAAAA,MAAM,GAACC,wBAAP,CAAgCtO,WAAhC;AACA,UAAI;AAAEyE,QAAAA,GAAG,EAAEpC;AAAP,UAAoB,MAAM,mCAAoBrC,WAApB,CAA9B,CALE,CAMF;;AACA,UAAIuI,YAAY,GAAG,MAAM1I,eAAe,GAACgd,oBAAhB,CAAqC7c,WAArC,CAAzB;AACA,UAAI8c,qBAAqB,GAAGjb,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqG,SAAL,CAAeK,YAAf,CAAX,CAA5B;AACAuU,MAAAA,qBAAqB,CAACvB,OAAtB,GAAgC,MAAhC;;AACA,UAAIuB,qBAAqB,CAACtB,QAAtB,KAAmC,UAAvC,EAAmD;AACjDsB,QAAAA,qBAAqB,CAACtB,QAAtB,GAAiC,QAAjC;AACD;;AACDnZ,MAAAA,QAAQ,CAAC0a,GAAT,GAAe,IAAf,CAbE,CAamB;;AACrB1a,MAAAA,QAAQ,CAACyI,SAAT,GAAqB;AACnBC,QAAAA,IAAI,EAAEoD,kBAAOD,aADM;AAEnBlO,QAAAA;AAFmB,OAArB;AAIAqC,MAAAA,QAAQ,CAACkG,YAAT,GAAwBA,YAAxB;AACAlG,MAAAA,QAAQ,CAAC8X,GAAT,GAAe,EAAf;;AACA,WAAK,IAAIjN,GAAT,IAAgB3B,MAAM,CAACC,IAAP,CAAY4O,OAAO,CAACD,GAApB,CAAhB,EAA0C;AACxC,YAAI2B,yCAAyC,CAAC5O,GAAD,CAA7C,EAAoD;AAClD7K,UAAAA,QAAQ,CAAC8X,GAAT,CAAajN,GAAb,IAAoBkN,OAAO,CAACD,GAAR,CAAYjN,GAAZ,CAApB;AACD;AACF;;AACD,UAAIiF,UAAU,GAAG,MAAMC,GAAG,GAACC,wBAAJ,CAA6BrS,WAA7B,CAAvB;AACA,UAAIY,QAAQ,GAAG,CAAC+b,GAAG,CAACjb,OAAJ,CAAY,mBAAZ,KAAoC,KAArC,EAA4CqQ,QAA5C,EAAf;AACAI,MAAAA,UAAU,GAAGjS,QAAQ,GAACa,4BAAT,CAAsCoR,UAAtC,EAAkDvR,QAAlD,CAAb;AACA,UAAIoc,cAAc,GAAG9c,QAAQ,GAAC+c,mBAAT,CAA6B9K,UAA7B,CAArB;AACA,UAAI+K,WAAW,GAAG,MAAMhd,QAAQ,GAACid,+BAAT,CAAyCnd,WAAzC,EAAsDuI,YAAtD,CAAxB;AACA,UAAI5F,IAAI,GAAI,IAAGya,SAAS,CAACJ,cAAD,CAAiB,oBAAmBK,kBAAkB,CAC5Ezc,QAD4E,CAE5E,IAAGsc,WAAY,EAFjB;AAGA7a,MAAAA,QAAQ,CAACgJ,SAAT,GACE,CAAC,MAAMnL,QAAQ,GAACob,uBAAT,CAAiCtb,WAAjC,EAA8C8c,qBAA9C,EAAqEH,GAAG,CAACW,QAAzE,CAAP,IACA3a,IAFF;AAGAN,MAAAA,QAAQ,CAACkb,YAAT,GAAwB,MAAMrd,QAAQ,GAACsd,0BAAT,CAAoCxd,WAApC,EAAiD2c,GAAG,CAACW,QAArD,CAA9B;AACAjb,MAAAA,QAAQ,CAAC2a,cAAT,GAA0BA,cAA1B;AACA3a,MAAAA,QAAQ,CAACob,MAAT,GAAkB,MAAMvd,QAAQ,GAACwd,oBAAT,CAA8B1d,WAA9B,EAA2C2c,GAAG,CAACW,QAA/C,CAAxB;AACAjb,MAAAA,QAAQ,CAACsb,OAAT,GAAmB,MAAMzd,QAAQ,GAAC0d,qBAAT,CAA+B5d,WAA/B,EAA4C2c,GAAG,CAACW,QAAhD,CAAzB;AACA,YAAMxa,sBAAsB,CAC1B9C,WAD0B,EAE1BqC,QAF0B,EAG1B,MAAMM,IAAN,IAAcN,QAAQ,CAACgJ,SAAT,CAAmBxH,KAAnB,CAAyB,mBAAzB,EAA8C,CAA9C,IAAmD,SAAnD,GAA+DlB,IAHnD,CAA5B,CAxCE,CA4CC;;AACH,YAAMP,0BAA0B,CAACpC,WAAD,EAAcqC,QAAd,CAAhC;AACA,YAAMwb,QAAQ,GAAG,MAAMC,wBAAaC,mBAAb,EAAvB;AACA,UAAIC,cAAc,GAAG,MAAM/S,gBAAYgT,eAAZ,EAA3B;;AACA,UAAI,CAACD,cAAD,IAAmB7P,kBAAO+P,OAA9B,EAAuC;AACrC7b,QAAAA,QAAQ,CAAC+I,EAAT,GAAe,IAAGD,0BAAmB,IAAG9I,QAAQ,CAAC0C,IAAK,IAAG8Y,QAAS,EAAlE;AACD;;AACD,UAAIte,cAAc,GAAGsC,IAAI,CAACqG,SAAL,CAAe7F,QAAf,CAArB;;AACA,UAAIsa,GAAG,CAACjb,OAAJ,CAAY,2BAAZ,CAAJ,EAA8C;AAC5C,YAAIpC,qBAAqB,CAACC,cAAtB,KAAyCA,cAA7C,EAA6D;AAC3DA,UAAAA,cAAc,GAAGD,qBAAqB,CAACE,cAAvC;AACD,SAFD,MAEO;AACL,cAAI,CAACwe,cAAD,IAAmB7P,kBAAO+P,OAA9B,EAAuC;AACrC,kBAAMC,gBAAgB,GAAG;AACvB5e,cAAAA,cADuB;AAEvB6e,cAAAA,SAAS,EAAE;AAFY,aAAzB;AAIA9e,YAAAA,qBAAqB,CAACC,cAAtB,GAAuCA,cAAvC;AACAA,YAAAA,cAAc,GAAGsC,IAAI,CAACqG,SAAL,CAAeiW,gBAAf,CAAjB;AACA7e,YAAAA,qBAAqB,CAACE,cAAtB,GAAuCD,cAAvC;AACD,WARD,MAQO;AACL,gBAAI8e,WAAW,GAAG,MAAMjM,GAAG,GAACkM,mBAAJ,CAAwBte,WAAxB,CAAxB;AACA,gBAAIR,cAAc,GAAG,MAAM+F,eAAIC,eAAJ,CACzB,cADyB,EAEzB,CAAC6Y,WAAW,CAACE,IAAb,CAFyB,EAGzB,MAHyB,EAIzBlc,QAJyB,CAA3B;AAMA/C,YAAAA,qBAAqB,CAACC,cAAtB,GAAuCA,cAAvC;AACAD,YAAAA,qBAAqB,CAACE,cAAtB,GAAuCA,cAAc,CAACyB,QAAtD;AACA1B,YAAAA,cAAc,GAAGC,cAAc,CAACyB,QAAhC;AACD;AACF;AACF;;AACD,YAAMud,QAAQ,GAAG;AACf3J,QAAAA,IAAI,EAAEgJ,QADS;AAEfY,QAAAA,MAAM,EAAE,KAFO;AAGfC,QAAAA,aAAa,EAAE/Z,OAAO,CAAC,iBAAD,CAAP,CAA2B2R,OAH3B;AAIfqI,QAAAA,YAAY,EAAExQ,kBAAOD,aAJN;AAKf0Q,QAAAA,QAAQ,EAAEC,cAAGje,QAAH,EALK;AAMfke,QAAAA,eAAe,EAAED,cAAGE,OAAH;AANF,OAAjB;AAQAnC,MAAAA,GAAG,CAACxX,MAAJ,CAAW,iBAAX,EAA8BvD,IAAI,CAACqG,SAAL,CAAesW,QAAf,CAA9B;AACA5B,MAAAA,GAAG,CAACoC,IAAJ,CAASzf,cAAT;AACAyO,MAAAA,SAAS,GAACC,QAAV,CAAmB,gBAAnB,EAAqC;AACnCjO,QAAAA,WADmC;AAEnCkO,QAAAA,aAAa,EAAEC,kBAAOD;AAFa,OAArC;AAID,KA5FD,CA4FE,OAAOnM,CAAP,EAAU;AACVC,MAAAA,YAAY,GAACC,QAAb,CAAsBjC,WAAtB,EAAmC,MAAnC,EAA2C+B,CAAC,CAACsO,KAA7C,EADU,CAEV;;AACAuM,MAAAA,GAAG,CAACnb,MAAJ,CAAW,GAAX,EAAgBud,IAAhB,CAAqB;AACnBrd,QAAAA,KAAK,EAAEI,CAAC,CAACgQ,QAAF;AADY,OAArB;AAGD;AACF,GApGD;;AAqGAoK,EAAAA,GAAG,CAAChb,GAAJ,CAAQ,GAAR,EAAaub,eAAb;AACAP,EAAAA,GAAG,CAAChb,GAAJ,CAAQ,WAAR,EAAqBub,eAArB;AACAP,EAAAA,GAAG,CAAChb,GAAJ,CAAQ,YAAR,EAAsBub,eAAtB;AACAP,EAAAA,GAAG,CAAC8C,IAAJ,CAAS,OAAT,EAAkB,OAAOtC,GAAP,EAAYC,GAAZ,KAAoB;AACpC,QAAI;AACF,UAAIlF,QAAQ,GAAGiF,GAAG,CAACxb,GAAJ,CAAQ,WAAR,CAAf;AACA,UAAIwW,UAAU,GAAGgF,GAAG,CAACxb,GAAJ,CAAQ,aAAR,CAAjB;;AACA,UAAIuW,QAAQ,IAAIC,UAAZ,IAA0BgF,GAAG,CAAC/a,IAAlC,EAAwC;AACtC6V,QAAAA,iBAAiB,CAACzX,WAAD,EAAc0X,QAAd,EAAwBC,UAAxB,EAAoCgF,GAAG,CAAC/a,IAAxC,CAAjB;AACD;AACF,KAND,CAME,OAAOG,CAAP,EAAU;AACVC,MAAAA,YAAY,GAACC,QAAb,CAAsBjC,WAAtB,EAAmC,MAAnC,EAA4C,8BAA6B+B,CAAE,IAAGA,CAAC,CAACsO,KAAM,EAAtF;AACD;;AACDuM,IAAAA,GAAG,CAACoC,IAAJ,CAAS,SAAT;AACD,GAXD;AAYA7C,EAAAA,GAAG,CAAC8C,IAAJ,CAAS,WAAT,EAAsB,OAAOtC,GAAP,EAAYC,GAAZ,KAAoB;AACxC6B,IAAAA,MAAM,CAACS,KAAP;AACAtC,IAAAA,GAAG,CAACoC,IAAJ,CAAS,SAAT;AACD,GAHD;AAIA,MAAIG,KAAK,GAAG,MAAM,8BAAenf,WAAf,CAAlB;AACA,MAAIJ,cAAc,GAAGuf,KAAK,CAACC,YAAN,GAAqBD,KAAK,CAACC,YAA3B,GAA0C,MAAM7e,iBAAiB,CAAC,KAAD,CAAtF;AACA,QAAMV,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD;AACtDJ,IAAAA;AADsD,GAAlD,CAAN;AAGA,MAAI6e,MAAM,GAAGtC,GAAG,CAACkD,MAAJ,CAAWzf,cAAX,EAA2B,MAAM;AAC5C,UAAM4J,IAAI,GAAGiV,MAAM,CAACa,OAAP,EAAb;AACA,UAAMzK,IAAI,GAAGrL,IAAI,CAAC8V,OAAlB;AACA,UAAM7e,IAAI,GAAG+I,IAAI,CAAC/I,IAAlB;AACAuB,IAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,oCAAmC6U,IAAK,IAAGpU,IAAK,EAA5F;AACD,GALY,CAAb;AAMA,QAAM2R,GAAG,GAACmN,sBAAJ,CAA2Bvf,WAA3B,CAAN;AACD;;AAEM,eAAekc,mBAAf,CAAmClc,WAAnC,EAAuE;AAC5EK,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AACA,MAAIuR,YAAY,GAAG,MAAM1R,eAAe,GAACC,qBAAhB,CAAsCE,WAAtC,CAAzB;;AACA,MAAIuR,YAAY,IAAIA,YAAY,CAAC3R,cAAjC,EAAiD;AAC/C,QAAI;AACF,YAAMsB,iBAAM+d,IAAN,CAAY,oBAAmB1N,YAAY,CAAC3R,cAAe,WAA3D,CAAN;AACD,KAFD,CAEE,OAAOmC,CAAP,EAAU,CAAE;AACf;;AACD,QAAMlC,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD;AACtDJ,IAAAA,cAAc,EAAE;AADsC,GAAlD,CAAN;AAGD;;AAED,eAAe4f,oBAAf,CACExf,WADF,EAEEue,IAFF,EAGEkB,aAHF,EAIEC,QAJF,EAKEC,QAAgB,GAAG,CALrB,EAMmB;AACjB,MAAI;AACF,UAAMC,UAAU,GAAGjd,gBAAKsF,IAAL,CAAU6V,wBAAa+B,oBAAb,EAAV,EAA+C,WAA/C,CAAnB;;AACA,UAAMvC,QAAQ,GAAG,MAAMmC,aAAa,EAApC;AACA,UAAMxf,GAAG,GAAG,MAAMhB,iBAAiB,CAAC;AAClCqe,MAAAA,QADkC;AAElCsC,MAAAA,UAFkC;AAGlC,SAAGrB;AAH+B,KAAD,CAAnC;AAKA,WAAOte,GAAP;AACD,GATD,CASE,OAAO8B,CAAP,EAAU;AACV;AACA,QAAI4d,QAAQ,IAAI,CAAhB,EAAmB;AACjB,UAAI5d,CAAC,CAACG,OAAN,EAAe;AACb,cAAM,KAAI5B,mBAAJ,EAAa,aAAb,EAA4ByB,CAAC,CAACgQ,QAAF,EAA5B,CAAN;AACD,OAFD,MAEO;AACL,cAAM,KAAIzR,mBAAJ,EAAa,aAAb,EAA4BuB,IAAI,CAACqG,SAAL,CAAenG,CAAf,CAA5B,CAAN;AACD;AACF;;AACD,QAAI,CAAC4d,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAG,CAAX;AACD,KAXS,CAWR;;;AACF,QAAI5d,CAAC,CAAC+d,UAAF,IAAgB/d,CAAC,CAAC+d,UAAF,KAAiB,GAArC,EAA0C;AACxC,UAAIH,QAAQ,KAAK,CAAjB,EAAoB;AAClB;AACA,YAAID,QAAJ,EAAc;AACZ,cAAI;AACFtF,YAAAA,OAAO,CAAC/a,IAAR,CAAaqgB,QAAb,EAAuB,SAAvB;AACD,WAFD,CAEE,OAAO3d,CAAP,EAAU;AACVC,YAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,gCAA+B0f,QAAS,EAApF;AACD;AACF,SAND,MAMO;AACL,gBAAMtgB,cAAc,EAApB;AACD;AACF,OAXD,MAWO;AACL;AACA,cAAMgT,GAAG,GAAC2N,2BAAJ,CAAgC/f,WAAhC,CAAN;AACD;AACF,KA5BS,CA4BR;;;AACF,UAAM,2BAAW,GAAX,CAAN;AACA,WAAOwf,oBAAoB,CAACxf,WAAD,EAAcue,IAAd,EAAoBkB,aAApB,EAAmC,IAAnC,EAAyCE,QAAQ,GAAG,CAApD,CAA3B;AACD;AACF;;AAEM,eAAeK,iBAAf,CAAiChgB,WAAjC,EAAqE;AAC1E,QAAMgL,QAAQ,GAAG,CAAC,MAAMC,gBAAYC,uBAAZ,EAAP,KAAiDC,0BAAlE;;AACA9K,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AACA,QAAMuR,YAAY,GAAG,MAAM1R,eAAe,GAACC,qBAAhB,CAAsCE,WAAtC,CAA3B;;AACA,MAAI,CAACuR,YAAY,CAAC5R,YAAlB,EAAgC;AAC9B,UAAM,KAAIW,mBAAJ,EAAa,kBAAb,EAAkC,oCAAmCN,WAAY,GAAjF,CAAN;AACD;;AACD,MAAI,CAACuR,YAAY,CAAC3R,cAAlB,EAAkC;AAChC,UAAM,KAAIU,mBAAJ,EACJ,qBADI,EAEH,uCAAsCN,WAAY,GAF/C,CAAN;AAID;;AACD,QAAMJ,cAAc,GAAG2R,YAAY,CAAC3R,cAApC;AACA,QAAMqgB,gBAAgB,CAACjgB,WAAD,CAAtB;;AACA,MAAI,MAAMkgB,OAAO,GAACC,oBAAR,CAA6BngB,WAA7B,CAAV,EAAqD;AACnDgC,IAAAA,YAAY,GAACiV,OAAb,CACEjX,WADF,EAEE,MAFF,EAGE,6FAHF;AAKD;;AACD,MAAIogB,gBAAgB,GAAGzd,gBAAKb,KAAL,CAAW9B,WAAX,EAAwBqgB,IAA/C;;AACA,MAAIlB,KAAK,GAAG,MAAM,8BAAenf,WAAf,CAAlB;AAEA,MAAIsgB,0BAA0B,GAAG,KAAjC,CAzB0E,CA2B1E;AACA;;AACA,QAAM7c,OAAO,CAACgY,IAAR,CAAa,CACjB,CAAC,YAAY;AACX,UAAM,2BAAW3c,cAAX,CAAN;;AACA,QAAI,CAACwhB,0BAAL,EAAiC;AAC/B,YAAM,IAAItc,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,GALD,GADiB,EAOjB,CAAC,YAAY;AACX,QAAIuc,kBAAkB,GAAG,MAAMf,oBAAoB,CACjDxf,WADiD,EAEjD;AACEwgB,MAAAA,SAAS,EAAErS,kBAAOjP,KAAP,CAAauhB,SAD1B;AAEEhgB,MAAAA,IAAI,EAAEb,cAFR;AAGE8gB,MAAAA,KAAK,EAAE;AAHT,KAFiD,EAOjD,YAAY;AACV,UAAIC,UAAU,GAAGxB,KAAK,CAACyB,wBAAN,GACbzB,KAAK,CAACyB,wBADO,GAEb,MAAMxO,GAAG,GAACyO,yBAAJ,CAA8B7gB,WAA9B,CAFV;AAGA,aAAO,CACL2gB,UADK,EAELzgB,QAAQ,GAAC4gB,SAAT,CAAmB9V,QAAnB,CAFK,EAGL9K,QAAQ,GAAC4gB,SAAT,CAAmBV,gBAAnB,CAHK,EAILjS,kBAAOjP,KAAP,CAAa6hB,MAJR,EAKL9Y,IALK,CAKA,GALA,CAAP;AAMD,KAjBgD,EAkBjDsJ,YAAY,CAACmO,QAlBoC,CAAnD;AAoBA,QAAIsB,gBAAgB,GAAG,MAAMxB,oBAAoB,CAC/Cxf,WAD+C,EAE/C;AACEwgB,MAAAA,SAAS,EAAErS,kBAAOjP,KAAP,CAAauhB,SAD1B;AAEEhgB,MAAAA,IAAI,EAAE8Q,YAAY,CAAC5R,YAFrB;AAGE+gB,MAAAA,KAAK,EAAE;AAHT,KAF+C,EAO/C,YAAY;AACV,UAAIC,UAAU,GAAGxB,KAAK,CAACyB,wBAAN,GACbzB,KAAK,CAACyB,wBADO,GAEb,MAAMxO,GAAG,GAACyO,yBAAJ,CAA8B7gB,WAA9B,CAFV;AAGA,aAAO,CACL,UADK,EAEL2gB,UAFK,EAGLzgB,QAAQ,GAAC4gB,SAAT,CAAmB9V,QAAnB,CAHK,EAIL9K,QAAQ,GAAC4gB,SAAT,CAAmBV,gBAAnB,CAJK,EAKLjS,kBAAOjP,KAAP,CAAa6hB,MALR,EAML9Y,IANK,CAMA,GANA,CAAP;AAOD,KAlB8C,EAmB/CsJ,YAAY,CAACmO,QAnBkC,CAAjD;AAqBA,UAAM7f,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD;AACtDugB,MAAAA,kBADsD;AAEtDS,MAAAA,gBAFsD;AAGtDtB,MAAAA,QAAQ,EAAExgB,iBAAMkb,OAAN,GAAgBO;AAH4B,KAAlD,CAAN;AAMA2F,IAAAA,0BAA0B,GAAG,IAA7B;AAEAte,IAAAA,YAAY,GAACgW,YAAb,CACEhY,WADF,EAEE,MAFF,EAGE;AACEiY,MAAAA,GAAG,EAAE,MADP;AAEEgJ,MAAAA,cAAc,EAAE;AAFlB,KAHF,EAOE,eAPF;;AAUA/hB,qBAAMgiB,WAAN,CAAkB,cAAlB,EAAmCzf,MAAD,IAAoB;AACpD,UAAIA,MAAM,KAAK,cAAf,EAA+B;AAC7BO,QAAAA,YAAY,GAACC,QAAb,CACEjC,WADF,EAEE,MAFF,EAGE,8CACE,qEADF,GAEE,0EAFF,GAGE,wBANJ;AAQD,OATD,MASO,IAAIyB,MAAM,KAAK,QAAf,EAAyB;AAC9BO,QAAAA,YAAY,GAACiV,OAAb,CAAqBjX,WAArB,EAAkC,MAAlC,EAA0C,mBAA1C;AACD;AACF,KAbD;AAcD,GA1ED,GAPiB,CAAb,CAAN;AAmFD;;AAEM,eAAeigB,gBAAf,CAAgCjgB,WAAhC,EAAoE;AACzEK,EAAAA,uBAAuB,CAACL,WAAD,CAAvB,CADyE,CAEzE;AACA;AACA;;;AACA,MAAIuR,YAAY,GAAG,MAAM1R,eAAe,GAACC,qBAAhB,CAAsCE,WAAtC,CAAzB;;AACA,MAAImhB,YAAY,GAAGjiB,iBAAMkb,OAAN,EAAnB;;AACA,MAAIgH,eAAe,GAAGD,YAAY,GAAGA,YAAY,CAACxG,GAAhB,GAAsB,IAAxD;;AACAzb,mBAAMmiB,kBAAN,CAAyB,cAAzB;;AACA,MAAI9P,YAAY,CAACmO,QAAb,IAAyBnO,YAAY,CAACmO,QAAb,KAA0B0B,eAAvD,EAAwE;AACtE;AACA,QAAI;AACFhH,MAAAA,OAAO,CAAC/a,IAAR,CAAakS,YAAY,CAACmO,QAA1B;AACD,KAFD,CAEE,OAAO3d,CAAP,EAAU;AACVC,MAAAA,YAAY,GAACmL,QAAb,CACEnN,WADF,EAEE,MAFF,EAGG,gCAA+BuR,YAAY,CAACmO,QAAS,EAHxD;AAKD;AACF,GAXD,MAWO;AACL;AACA,UAAMtgB,cAAc,EAApB;AACD;;AACD,QAAMS,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD;AACtDugB,IAAAA,kBAAkB,EAAE,IADkC;AAEtDS,IAAAA,gBAAgB,EAAE,IAFoC;AAGtDtB,IAAAA,QAAQ,EAAE;AAH4C,GAAlD,CAAN;AAKA,QAAMQ,OAAO,GAACoB,mBAAR,CAA4BthB,WAA5B,CAAN;AACD;;AAEM,eAAeuhB,eAAf,CACLvhB,WADK,EAEL6E,OAFK,EAKU;AACfxE,EAAAA,uBAAuB,CAACL,WAAD,CAAvB,CADe,CACuB;;;AACtC,MAAI0R,MAAM,GAAGC,eAAIC,MAAJ,GAAapG,IAAb,CAAkB;AAC7B7L,IAAAA,YAAY,EAAEgS,eAAI6P,MAAJ,GAAaC,OAAb;AADe,GAAlB,CAAb;;AAGA,QAAM;AAAE9f,IAAAA;AAAF,MAAYgQ,eAAIG,QAAJ,CAAajN,OAAb,EAAsB6M,MAAtB,CAAlB;;AACA,MAAI/P,KAAJ,EAAW;AACT,UAAM,KAAIrB,mBAAJ,EAAa,iBAAb,EAAgCqB,KAAK,CAACoQ,QAAN,EAAhC,CAAN;AACD;;AACD,QAAMlS,eAAe,GAAC4a,oBAAhB,CAAqCza,WAArC,EAAkD6E,OAAlD,CAAN;AACD,C,CAED;;;AACO,eAAe6c,WAAf,CAA2B1hB,WAA3B,EAAgD6E,OAAe,GAAG,EAAlE,EAAuF;AAC5FxE,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AACA,SAAO,MAAME,QAAQ,GAACC,yBAAT,CAAmCH,WAAnC,EAAgD6E,OAAhD,CAAb;AACD;;AAEM,eAAe8c,aAAf,CACL3hB,WAAmB,GAAG,IADjB,EAEL6E,OAAuC,GAAG,EAFrC,EAGU;AACf8C,oBAAOC,MAAP,CAAc4B,IAAd,CAAmBoY,iBAAMC,KAAN,CAAY,sBAAZ,CAAnB;;AAEA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA2B,MAAM,sCAAmB/hB,WAAnB,CAAvC,CAHe,CAIf;;AACA,QAAMgiB,QAAQ,GAAG,IAAItO,GAAJ,EAAjB;;AACA,OAAK,MAAMuO,QAAX,IAAuBF,SAAvB,EAAkCC,QAAQ,CAAClO,GAAT,CAAamO,QAAb;;AAElC,MAAIC,UAAU,GAAG,CAAjB;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA8B,MAAM,sCAAmBpiB,WAAnB,EAAgC6E,OAAhC,CAA1C;AACA,QAAMwd,MAAsC,GAAG,EAA/C,CAVe,CAWf;;AACAF,EAAAA,QAAQ,CAAChe,OAAT,CAAiBiI,QAAQ,IAAI;AAC3B,UAAMpC,IAAI,GAAG,iCAAcoC,QAAd,CAAb;;AACA,QAAI2V,SAAS,CAAC/X,IAAD,CAAb,EAAqB;AACnBgY,MAAAA,QAAQ,CAACM,MAAT,CAAgBtY,IAAhB;AACD;;AACDqY,IAAAA,MAAM,CAACjW,QAAD,CAAN,GAAmBpC,IAAnB;AACD,GAND;AAOAgY,EAAAA,QAAQ,CAAC7d,OAAT,CAAiBoe,YAAY,IAAI;AAC/B,WAAOR,SAAS,CAACQ,YAAD,CAAhB;AACD,GAFD;AAIA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAA6B7d,OAAnC;AACA,QAAM8d,OAAO,GAAG9d,OAAO,CAAC8d,OAAR,IAAmB,IAAnB,GAA0B,EAA1B,GAA+B9d,OAAO,CAAC8d,OAAvD;AAEA,QAAMC,MAAM,GAAGJ,OAAO,IAAIC,OAAX,GAAqBL,aAArB,GAAqCD,QAApD;;AACA,OAAK,MAAMU,KAAX,IAAoBD,MAApB,EAA4B;AAC1B,UAAM5Y,IAAI,GAAGqY,MAAM,CAACQ,KAAD,CAAnB;;AACA,QAAId,SAAS,CAAC/X,IAAD,CAAb,EAAqB;AACnB;AACD;;AACD,UAAM;AAAE0C,MAAAA,IAAI,EAAEoW;AAAR,QAAqBrgB,mBAAGsgB,QAAH,CAAYF,KAAZ,CAA3B;;AAEA,UAAMG,OAAO,GAAG,qCAAkBH,KAAlB,CAAhB;AACA,UAAMI,cAAc,GAAG,MAAM,sCAAmBJ,KAAnB,EAA0BF,OAA1B,CAA7B;;AAEA,UAAM;AAAEjW,MAAAA,IAAI,EAAEwW;AAAR,QAAoBzgB,mBAAGsgB,QAAH,CAAYE,cAAZ,CAA1B;;AACA,UAAME,WAAW,GAAGL,QAAQ,GAAGI,OAA/B;;AACA,QAAIC,WAAW,GAAG,CAAlB,EAAqB;AACnB,YAAM1gB,mBAAG2gB,IAAH,CAAQP,KAAR,EAAeG,OAAf,CAAN;AACA,YAAMvgB,mBAAG2gB,IAAH,CAAQH,cAAR,EAAwBJ,KAAxB,CAAN;AACD,KAHD,MAGO;AACLd,MAAAA,SAAS,CAAC/X,IAAD,CAAT,GAAkB,IAAlB;;AACArC,wBAAOC,MAAP,CAAc4B,IAAd,CACEoY,iBAAMyB,IAAN,CACEF,WAAW,KAAK,CAAhB,GACK,yBAAwBN,KAAM,iDADnC,GAEK,yBAAwBA,KAAM,oDAHrC,CADF;;AAOA;AACD,KAzByB,CA0B1B;;;AACA,UAAMS,OAAO,GAAG,iCAAcT,KAAd,CAAhB;AACAd,IAAAA,SAAS,CAACuB,OAAD,CAAT,GAAqB,IAArB;;AAEA,QAAIZ,IAAJ,EAAU;AACR,UAAI1Y,IAAI,KAAKsZ,OAAb,EAAsB;AACpB3b,0BAAOC,MAAP,CAAc4B,IAAd,CACEoY,iBAAMyB,IAAN,CACG,oBAAmBR,KAAM,wDAD5B,CADF;;AAKApgB,2BAAG8gB,UAAH,CAAcP,OAAd;AACD,OAPD,MAOO;AACLrb,0BAAOC,MAAP,CAAc4B,IAAd,CAAmBoY,iBAAMyB,IAAN,CAAY,4BAA2BL,OAAQ,EAA/C,CAAnB,EADK,CAEL;;;AACAjB,QAAAA,SAAS,CAAC/X,IAAD,CAAT,GAAkB,IAAlB;AACD;AACF,KAbD,MAaO;AACL;AACAvH,yBAAG8gB,UAAH,CAAcP,OAAd;AACD;;AACD,QAAIG,WAAJ,EAAiB;AACfjB,MAAAA,UAAU,IAAIiB,WAAd;;AACAxb,wBAAOC,MAAP,CAAc4B,IAAd,CAAoB,SAAQ,4BAAY2Z,WAAZ,CAAyB,EAArD;AACD,KAHD,MAGO;AACLxb,wBAAOC,MAAP,CAAc4B,IAAd,CAAmBoY,iBAAMyB,IAAN,CAAY,sBAAZ,CAAnB;AACD;AACF;;AACD,MAAInB,UAAU,KAAK,CAAnB,EAAsB;AACpBva,sBAAOC,MAAP,CAAc4B,IAAd,CAAmB,sDAAnB;AACD,GAFD,MAEO;AACL7B,sBAAOC,MAAP,CAAc4B,IAAd,CACG,gCAA+BoY,iBAAMC,KAAN,CAAY,4BAAYK,UAAZ,CAAZ,CAAqC,SADvE;AAGD;;AACDJ,EAAAA,SAAS,CAAC0B,UAAV,CAAqBzB,SAArB;AACD;;AAEM,eAAe0B,UAAf,CACLzjB,WADK,EAEL6E,OAAqB,GAAG,EAFnB,EAGLwT,OAAgB,GAAG,IAHd,EAIgB;AACrBhY,EAAAA,uBAAuB,CAACL,WAAD,CAAvB;;AACAgO,EAAAA,SAAS,GAACC,QAAV,CAAmB,eAAnB,EAAoC;AAClCjO,IAAAA,WADkC;AAElCkO,IAAAA,aAAa,EAAEC,kBAAOD;AAFY,GAApC;AAKA,MAAI;AAAEzJ,IAAAA;AAAF,MAAU,MAAM,mCAAoBzE,WAApB,EAAiC6E,OAAO,CAAC6e,OAAzC,CAApB;;AACA,MAAI7e,OAAO,CAAC6e,OAAZ,EAAqB;AACnB,UAAMC,OAAO,GAACC,YAAR,CAAqB5jB,WAArB,EAAkC6E,OAAlC,CAAN;AACAgf,IAAAA,UAAU,GAACC,YAAX,CAAwB9jB,WAAxB,EAAqCyE,GAArC,EAA0C,KAA1C;AACA,WAAOA,GAAP;AACD,GAJD,MAIO;AACL,UAAMwX,oBAAoB,CAACjc,WAAD,CAA1B;AACA,UAAMwR,2BAA2B,CAACxR,WAAD,EAAc6E,OAAd,EAAuBwT,OAAvB,CAAjC;AACAwL,IAAAA,UAAU,GAACC,YAAX,CAAwB9jB,WAAxB,EAAqCyE,GAArC,EAA0C,QAA1C;AACD;;AAED,MAAI,CAAC0J,kBAAO+P,OAAZ,EAAqB;AACnB,QAAI;AACF,YAAM8B,iBAAiB,CAAChgB,WAAD,CAAvB;AACD,KAFD,CAEE,OAAO+B,CAAP,EAAU;AACVC,MAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,yBAAwB+B,CAAC,CAACG,OAAQ,EAA9E;AACD;AACF;;AACD,SAAOuC,GAAP;AACD;;AAED,eAAesf,kBAAf,CAAkC/jB,WAAlC,EAAsE;AACpE6jB,EAAAA,UAAU,GAACG,WAAX;AACA,QAAML,OAAO,GAACM,SAAR,CAAkBjkB,WAAlB,CAAN;AACAgC,EAAAA,YAAY,GAACiV,OAAb,CAAqBjX,WAArB,EAAkC,MAAlC,EAA0C,4BAA1C;AACA,QAAMkc,mBAAmB,CAAClc,WAAD,CAAzB;AACAgC,EAAAA,YAAY,GAACiV,OAAb,CAAqBjX,WAArB,EAAkC,MAAlC,EAA0C,+BAA1C;AACA,QAAMsY,0BAA0B,CAACtY,WAAD,CAAhC;;AACA,MAAI,CAACmO,kBAAO+P,OAAZ,EAAqB;AACnB,QAAI;AACF,YAAM+B,gBAAgB,CAACjgB,WAAD,CAAtB;AACD,KAFD,CAEE,OAAO+B,CAAP,EAAU;AACVC,MAAAA,YAAY,GAACmL,QAAb,CAAsBnN,WAAtB,EAAmC,MAAnC,EAA4C,wBAAuB+B,CAAC,CAACG,OAAQ,EAA7E;AACD;AACF;AACF;;AAEM,eAAegiB,gBAAf,CAAgCxkB,UAAhC,EAAmE;AACxE,QAAMikB,OAAO,GAACM,SAAR,CAAkBvkB,UAAlB,CAAN;AACA,QAAMmkB,UAAU,GAACG,WAAX,EAAN;AACD;;AAEM,eAAeC,SAAf,CAAyBvkB,UAAzB,EAA4D;AACjE,QAAMuQ,MAAM,GAAG,MAAMxM,OAAO,CAACgY,IAAR,CAAa,CAChCsI,kBAAkB,CAACrkB,UAAD,CADc,EAEhC,IAAI+D,OAAJ,CAAY,CAACb,OAAD,EAAUsY,MAAV,KAAqBiJ,UAAU,CAACvhB,OAAD,EAAU,IAAV,EAAgB,YAAhB,CAA3C,CAFgC,CAAb,CAArB;;AAIA,MAAIqN,MAAM,KAAK,YAAf,EAA6B;AAC3B;AACA,UAAM;AAAEyK,MAAAA,WAAF;AAAegF,MAAAA;AAAf,QAA4B,MAAM7f,eAAe,GAACC,qBAAhB,CAAsCJ,UAAtC,CAAxC;;AACA,QAAIgb,WAAJ,EAAiB;AACf,UAAI;AACFN,QAAAA,OAAO,CAAC/a,IAAR,CAAaqb,WAAb;AACD,OAFD,CAEE,OAAO3Y,CAAP,EAAU,CAAE;AACf;;AACD,QAAI2d,QAAJ,EAAc;AACZ,UAAI;AACFtF,QAAAA,OAAO,CAAC/a,IAAR,CAAaqgB,QAAb;AACD,OAFD,CAEE,OAAO3d,CAAP,EAAU,CAAE;AACf;;AACD,UAAMlC,eAAe,GAAC4a,oBAAhB,CAAqC/a,UAArC,EAAiD;AACrDE,MAAAA,cAAc,EAAE,IADqC;AAErDD,MAAAA,YAAY,EAAE,IAFuC;AAGrD+a,MAAAA,WAAW,EAAE,IAHwC;AAIrD6F,MAAAA,kBAAkB,EAAE,IAJiC;AAKrDS,MAAAA,gBAAgB,EAAE,IALmC;AAMrDtB,MAAAA,QAAQ,EAAE,IAN2C;AAOrD0E,MAAAA,iBAAiB,EAAE;AAPkC,KAAjD,CAAN;AASD;AACF","sourcesContent":["import {\n  Platform,\n  readExpRcAsync,\n  projectHasModule,\n  configFilename,\n  PackageJSONConfig,\n  resolveModule,\n  ExpoConfig,\n  readConfigJsonAsync,\n} from '@expo/config';\n\nimport { getManagedExtensions } from '@expo/config/paths';\nimport JsonFile from '@expo/json-file';\nimport ngrok from '@expo/ngrok';\nimport axios from 'axios';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport decache from 'decache';\nimport delayAsync from 'delay-async';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport md5hex from 'md5hex';\nimport minimatch from 'minimatch';\nimport { AddressInfo } from 'net';\nimport os from 'os';\nimport path from 'path';\nimport prettyBytes from 'pretty-bytes';\nimport readLastLines from 'read-last-lines';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport urljoin from 'url-join';\nimport { promisify } from 'util';\nimport uuid from 'uuid';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport ApiV2 from './ApiV2';\nimport * as AssetUtils from './AssetUtils';\nimport {\n  calculateHash,\n  createNewFilename,\n  getAssetFilesAsync,\n  optimizeImageAsync,\n  readAssetJsonAsync,\n} from './AssetUtils';\nimport Config from './Config';\nimport * as ExponentTools from './detach/ExponentTools';\nimport StandaloneContext from './detach/StandaloneContext';\nimport * as DevSession from './DevSession';\nimport { maySkipManifestValidation } from './Env';\nimport { ErrorCode } from './ErrorCode';\nimport * as Exp from './Exp';\nimport logger from './Logger';\nimport * as ExpSchema from './project/ExpSchema';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Sentry from './Sentry';\nimport * as ThirdParty from './ThirdParty';\nimport FormData from './tools/FormData';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME, User } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport * as Webpack from './Webpack';\nimport XDLError from './XDLError';\n\nimport * as Doctor from './project/Doctor';\nimport * as IosPlist from './detach/IosPlist';\n// @ts-ignore IosWorkspace not yet converted to TypeScript\nimport * as IosWorkspace from './detach/IosWorkspace';\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype CachedSignedManifest =\n  | {\n      manifestString: null;\n      signedManifest: null;\n    }\n  | {\n      manifestString: string;\n      signedManifest: string;\n    };\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\ntype Asset =\n  | { fileHashes: string[]; files: string[]; hash: string }\n  | {\n      __packager_asset: true;\n      fileHashes: string[];\n      files: string[];\n      fileSystemLocation: string;\n      hash: string;\n      httpServerLocation: string;\n      name: string;\n      scales: number[];\n      type: string;\n    };\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype PublicConfig = ExpoConfig & {\n  sdkVersion: string;\n};\n\ntype SelfHostedIndex = PublicConfig & {\n  dependencies: string[];\n};\n\ntype StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n};\n\ntype PublishOptions = {\n  releaseChannel?: string;\n};\n\ntype PackagerOptions = {\n  dev: boolean;\n  minify: boolean;\n};\n\ntype HookArguments = {\n  config: any;\n  url: any;\n  exp: PublicConfig;\n  iosBundle: string;\n  iosSourceMap: string | null;\n  iosManifest: any;\n  androidBundle: string;\n  androidSourceMap: string | null;\n  androidManifest: any;\n  projectRoot: string;\n  log: (msg: any) => void;\n};\n\ntype PostPublishHook = {\n  file: string;\n  config: any;\n  _fn: (input: HookArguments) => any;\n};\n\ntype Release = {\n  fullName: string;\n  channel: string;\n  channelId: string;\n  publicationId: string;\n  appVersion: string;\n  sdkVersion: string;\n  publishedTime: string;\n  platform: string;\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(\n  projectRoot: string\n): Promise<{ url: string; isUrlFallback: false }> {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot: string) {\n  if (!projectRoot) {\n    throw new XDLError('NO_PROJECT_ROOT', 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart: number) {\n  let port = await freeportAsync(rangeStart, { hostnames: [null, 'localhost'] });\n  if (!port) {\n    throw new XDLError('NO_PORT_FOUND', 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(\n  projectRoot: string,\n  url: string,\n  platform: Platform,\n  { errorCode, minLength }: { errorCode: ErrorCode; minLength?: number }\n): Promise<string> {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.get(fullUrl, {\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${error.response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios && manifest.ios.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(\n  projectRoot: string,\n  manifest: PublicConfig,\n  resolver: (assetPath: string) => Promise<string>,\n  strict = false\n) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(\n      manifest.sdkVersion\n    )).filter((assetSchema: ExpSchema.AssetSchema) => get(manifest, assetSchema.fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async (assetSchema: ExpSchema.AssetSchema) => {\n        const pathOrURL = get(manifest, assetSchema.fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = assetSchema.fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((assetSchema: ExpSchema.AssetSchema, index: number) =>\n      set(manifest, assetSchema.fieldPath + 'Url', urls[index])\n    );\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath: string, projectRoot: string, exp: ExpoConfig) {\n  try {\n    let fullPath = resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options = {}): Promise<string> {\n  const { exp, pkg } = await readConfigJsonAsync(projectRoot);\n  if (exp.slug) {\n    return exp.slug;\n  }\n  if (pkg.name) {\n    return pkg.name;\n  }\n  throw new XDLError(\n    'INVALID_MANIFEST',\n    `app.json in ${projectRoot} must contain the \"slug\" field`\n  );\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string;\n    platform: string;\n  }\n): Promise<Release | null> {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n): Promise<void> {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes: SelfHostedIndex[] = [];\n  const iosIndexes: SelfHostedIndex[] = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath: string, accumulator: SelfHostedIndex[]) => {\n      const index = (await JsonFile.readAsync(indexPath)) as SelfHostedIndex;\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          'INVALID_MANIFEST',\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = (indexes: SelfHostedIndex[]) => {\n    return indexes.sort((index1: SelfHostedIndex, index2: SelfHostedIndex) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${index1.sdkVersion}. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {\n    isDev?: boolean;\n    dumpAssetmap?: boolean;\n    dumpSourcemap?: boolean;\n    publishOptions?: PublishOptions;\n  } = {}\n): Promise<void> {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // build the bundles\n  let packagerOpts = {\n    dev: !!options.isDev,\n    minify: true,\n  };\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await _writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await _writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap: { [hash: string]: Asset } = {};\n    assets.forEach((asset: Asset) => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n  }\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', androidBundleUrl);\n  exp.platform = 'android';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify({ ...exp, dependencies: Object.keys(pkg.dependencies) })\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', iosBundleUrl);\n  exp.platform = 'ios';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _buildSourceMapsAsync(projectRoot, exp);\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string\n): Promise<{ downloadUrl?: string; canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n  });\n\n  return buildReuseStatus;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: PublishOptions = {}\n): Promise<{ url: string; ids: string[]; err?: string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      'PUBLISH_VALIDATION_ERROR',\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks: PostPublishHook[] = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach((hook: any) => {\n      let { file } = hook;\n      let fn = _requireFromProject(file, projectRoot, exp);\n      if (typeof fn !== 'function') {\n        logger.global.error(\n          `Unable to load postPublishHook: '${file}'. The module does not export a function.`\n        );\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        'HOOK_INITIALIZATION_ERROR',\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force:\n      validPostPublishHooks.length > 0 ||\n      (exp.android && exp.android.publishSourceMapPath) ||\n      (exp.ios && exp.ios.publishSourceMapPath),\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: (msg: any) => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n      const context = StandaloneContext.createUserContext(projectRoot, exp);\n      const { supportingDirectory } = IosWorkspace.getPaths(context);\n      await IosPlist.modifyAsync(supportingDirectory, 'EXShell', (shellPlist: any) => {\n        shellPlist.releaseChannel = options.releaseChannel;\n        return shellPlist;\n      });\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = response.url.replace('exp://', 'https://');\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${options.releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({\n  exp,\n  iosBundle,\n  androidBundle,\n  options,\n  pkg,\n}: {\n  exp: ExpoConfig;\n  iosBundle: string;\n  androidBundle: string;\n  options: PublishOptions;\n  pkg: PackageJSONConfig;\n}) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(\n  projectRoot: string,\n  options: PublishOptions\n): Promise<{\n  exp: PublicConfig;\n  pkg: PackageJSONConfig;\n}> {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  const { exp, pkg } = await readConfigJsonAsync(projectRoot);\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  const { sdkVersion } = exp;\n\n  if (!sdkVersion) {\n    throw new XDLError('INVALID_OPTIONS', `Cannot publish with sdkVersion '${exp.sdkVersion}'.`);\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return { exp: { ...exp, sdkVersion }, pkg };\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot: string, opts?: PackagerOptions) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(\n    projectRoot,\n    entryPoint,\n    undefined,\n    opts\n  );\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\nasync function _maybeBuildSourceMapsAsync(\n  projectRoot: string,\n  exp: ExpoConfig,\n  options = { force: false }\n) {\n  if (options.force) {\n    return _buildSourceMapsAsync(projectRoot, exp);\n  } else {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _buildSourceMapsAsync(projectRoot: string, exp: ExpoConfig) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(\n  projectRoot: string,\n  exp: PublicConfig,\n  hostedAssetPrefix: string\n): Promise<Asset[]> {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async (assetPath: string) => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoConfig, assets: Asset[]) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot: string, exp: PublicConfig) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(\n  projectRoot: string,\n  exp: PublicConfig,\n  hostedUrl: string,\n  outputDir: string\n) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(\n  projectRoot: string,\n  keyName: string | null,\n  artifactPath: string,\n  artifact: string\n) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}: {\n  exp: ExpoConfig;\n  projectRoot: string;\n  iosBundle: string;\n  androidBundle: string;\n  iosSourceMap: string | null;\n  androidSourceMap: string | null;\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath && androidSourceMap) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath && iosSourceMap) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({\n  projectRoot,\n  user,\n  exp,\n  url,\n}: {\n  projectRoot: string;\n  user: User;\n  exp: ExpoConfig;\n  url: string;\n}) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, fs.createReadStream(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean;\n    mode?: string;\n    platform?: 'android' | 'ios' | 'all';\n    expIds?: Array<string>;\n    type?: string;\n    releaseChannel?: string;\n    bundleIdentifier?: string;\n    publicUrl?: string;\n  } = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = await readConfigJsonAsync(projectRoot);\n    const configName = configFilename(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: configFilename(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\n// TODO(ville): add the full type\ntype BuildJob = unknown;\n\ntype BuildStatusResult = {\n  jobs: BuildJob[];\n  err: null;\n  userHasBuiltAppBefore: boolean;\n  userHasBuiltExperienceBefore: boolean;\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\ntype BuildCreatedResult = {\n  id: string;\n  ids: string[];\n  priority: 'normal' | 'high';\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean;\n    mode?: string;\n    platform?: 'android' | 'ios' | 'all';\n    expIds?: Array<string>;\n    type?: string;\n    releaseChannel?: string;\n    bundleIdentifier?: string;\n    publicUrl?: string;\n    sdkVersion?: string;\n  } = {}\n): Promise<BuildStatusResult | BuildCreatedResult> {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client', 'app-bundle', 'apk'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && 'version' in pkg && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && 'name' in pkg && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'ios' || options.platform === 'all')) {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'android' || options.platform === 'all')) {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n}\n\nasync function _waitForRunningAsync(\n  projectRoot: string,\n  url: string,\n  retries: number = 300\n): Promise<true> {\n  try {\n    let response = await axios.get(url, {\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (_isIgnorableMetroConsoleOutput(output) || _isIgnorableRnpmWarning(output)) {\n    ProjectUtils.logDebug(projectRoot, 'expo', output);\n    return;\n  }\n\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableMetroConsoleOutput(output: string) {\n  // As of React Native 0.61.x, Metro prints console logs from the device to console, without\n  // passing them through the custom log reporter.\n  //\n  // Managed apps have a separate remote logging implementation included in the Expo SDK,\n  // (see: _handleDeviceLogs), so we can just ignore these device logs from Metro.\n  // if (/^ () /)\n  //\n  // These logs originate from:\n  // https://github.com/facebook/metro/blob/e8181fb9db7db31adf7d1ed9ab840f54449ef238/packages/metro/src/lib/logToConsole.js#L50\n  return /^\\s+(INFO|WARN|LOG|GROUP|DEBUG) /.test(output);\n}\n\nfunction _isIgnorableRnpmWarning(output: string) {\n  return output.startsWith(\n    'warn The following packages use deprecated \"rnpm\" config that will stop working from next release'\n  );\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body: any[]) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body: any[]) {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    let string = body\n      .map((obj: any) => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: StartOptions = {},\n  verbose: boolean = true\n): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  let customLogReporterPath: string | undefined;\n\n  const possibleLogReporterPath = projectHasModule('expo/tools/LogReporter', projectRoot, exp);\n  if (possibleLogReporterPath) {\n    customLogReporterPath = possibleLogReporterPath;\n  } else {\n    // TODO: Bacon: Prompt to install expo?\n    logger.global.warn(`Expo is not installed: Using default reporter to format logs.`);\n  }\n\n  let packagerOpts: { [key: string]: any } = {\n    port: packagerPort,\n    customLogReporterPath,\n    assetExts: ['ttf'],\n    // TODO: Bacon: Support .mjs (short-lived JS modules extension that some packages use)\n    sourceExts: getManagedExtensions([], { isTS: true, isReact: true, isModern: false }),\n  };\n\n  if (options.nonPersistent && Versions.lteSdkVersion(exp, '32.0.0')) {\n    packagerOpts.nonPersistent = true;\n  }\n\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    packagerOpts.assetPlugins = resolveModule('expo/tools/hashAssetFiles', projectRoot, exp);\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...userPackagerOpts.assetExts\n        ? {\n            assetExts: uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {},\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      ELECTRON_RUN_AS_NODE: '1',\n      ...nodePath ? { NODE_PATH: nodePath } : {},\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  if (!packagerProcess.stdout) {\n    throw new Error('Expected spawned process to have a stdout stream, but none was found.');\n  }\n  if (!packagerProcess.stderr) {\n    throw new Error('Expected spawned process to have a stderr stream, but none was found.');\n  }\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key: string) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  const manifestHandler = async (req: express.Request, res: express.Response) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await readConfigJsonAsync(projectRoot);\n      // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = (req.headers['exponent-platform'] || 'ios').toString();\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(projectRoot, packagerOpts);\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest as PublicConfig,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    const info = server.address() as AddressInfo;\n    const host = info.address;\n    const port = info.port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\nexport async function stopExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.post(`http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: ngrok.NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  try {\n    const configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    const hostname = await hostnameAsync();\n    const url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string): Promise<void> {\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  _assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', (status: string) => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number;\n  }\n): Promise<void> {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\n\n// DEPRECATED(2019-08-21): use UrlUtils.constructManifestUrlAsync\nexport async function getUrlAsync(projectRoot: string, options: object = {}): Promise<string> {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function optimizeAsync(\n  projectRoot: string = './',\n  options: AssetUtils.OptimizationOptions = {}\n): Promise<void> {\n  logger.global.info(chalk.green('Optimizing assets...'));\n\n  const { assetJson, assetInfo } = await readAssetJsonAsync(projectRoot);\n  // Keep track of which hash values in assets.json are no longer in use\n  const outdated = new Set<string>();\n  for (const fileHash in assetInfo) outdated.add(fileHash);\n\n  let totalSaved = 0;\n  const { allFiles, selectedFiles } = await getAssetFilesAsync(projectRoot, options);\n  const hashes: { [filePath: string]: string } = {};\n  // Remove assets that have been deleted/modified from assets.json\n  allFiles.forEach(filePath => {\n    const hash = calculateHash(filePath);\n    if (assetInfo[hash]) {\n      outdated.delete(hash);\n    }\n    hashes[filePath] = hash;\n  });\n  outdated.forEach(outdatedHash => {\n    delete assetInfo[outdatedHash];\n  });\n\n  const { include, exclude, save } = options;\n  const quality = options.quality == null ? 80 : options.quality;\n\n  const images = include || exclude ? selectedFiles : allFiles;\n  for (const image of images) {\n    const hash = hashes[image];\n    if (assetInfo[hash]) {\n      continue;\n    }\n    const { size: prevSize } = fs.statSync(image);\n\n    const newName = createNewFilename(image);\n    const optimizedImage = await optimizeImageAsync(image, quality);\n\n    const { size: newSize } = fs.statSync(optimizedImage);\n    const amountSaved = prevSize - newSize;\n    if (amountSaved > 0) {\n      await fs.move(image, newName);\n      await fs.move(optimizedImage, image);\n    } else {\n      assetInfo[hash] = true;\n      logger.global.info(\n        chalk.gray(\n          amountSaved === 0\n            ? `Compressed version of ${image} same size as original. Using original instead.`\n            : `Compressed version of ${image} was larger than original. Using original instead.`\n        )\n      );\n      continue;\n    }\n    // Recalculate hash since the image has changed\n    const newHash = calculateHash(image);\n    assetInfo[newHash] = true;\n\n    if (save) {\n      if (hash === newHash) {\n        logger.global.info(\n          chalk.gray(\n            `Compressed asset ${image} is identical to the original. Using original instead.`\n          )\n        );\n        fs.unlinkSync(newName);\n      } else {\n        logger.global.info(chalk.gray(`Saving original asset to ${newName}`));\n        // Save the old hash to prevent reoptimizing\n        assetInfo[hash] = true;\n      }\n    } else {\n      // Delete the renamed original asset\n      fs.unlinkSync(newName);\n    }\n    if (amountSaved) {\n      totalSaved += amountSaved;\n      logger.global.info(`Saved ${prettyBytes(amountSaved)}`);\n    } else {\n      logger.global.info(chalk.gray(`Nothing to compress.`));\n    }\n  }\n  if (totalSaved === 0) {\n    logger.global.info('No assets optimized. Everything is fully compressed!');\n  } else {\n    logger.global.info(\n      `Finished compressing assets. ${chalk.green(prettyBytes(totalSaved))} saved.`\n    );\n  }\n  assetJson.writeAsync(assetInfo);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: StartOptions = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  let { exp } = await readConfigJsonAsync(projectRoot, options.webOnly);\n  if (options.webOnly) {\n    await Webpack.restartAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n    return exp;\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync(projectRoot, options, verbose);\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await Webpack.stopAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Closing Expo server');\n  await stopExpoServerAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Stopping Metro bundler');\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\n\nexport async function stopWebOnlyAsync(projectDir: string): Promise<void> {\n  await Webpack.stopAsync(projectDir);\n  await DevSession.stopSession();\n}\n\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n      webpackServerPort: null,\n    });\n  }\n}\n"],"file":"../Project.js","sourceRoot":"/@expo/xdl@56.8.2/src"}